{"version":3,"file":"vega-webgpu-renderer.js","sources":["../node_modules/tslib/tslib.es6.js","../src/util/color.ts","../src/util/resize.ts","../src/util/formatSize.ts","../src/util/vertexManager.ts","../src/util/bufferManager.ts","../src/util/renderer.ts","../node_modules/parse-svg-path/index.js","../node_modules/simplify-path/radial-distance.js","../node_modules/simplify-path/douglas-peucker.js","../node_modules/simplify-path/index.js","../node_modules/adaptive-bezier-curve/function.js","../node_modules/adaptive-bezier-curve/index.js","../node_modules/abs-svg-path/index.js","../node_modules/normalize-svg-path/index.js","../node_modules/vec2-copy/index.js","../node_modules/svg-path-contours/index.js","../node_modules/tess2/src/tess2.js","../node_modules/tess2/index.js","../node_modules/xtend/immutable.js","../node_modules/triangulate-contours/index.js","../src/path/geometryForPath.ts","../node_modules/d3-shape/src/constant.js","../node_modules/d3-shape/src/math.js","../node_modules/d3-path/src/path.js","../node_modules/d3-shape/src/path.js","../node_modules/d3-shape/src/arc.js","../node_modules/d3-shape/src/array.js","../node_modules/d3-shape/src/curve/linear.js","../node_modules/d3-shape/src/point.js","../node_modules/d3-shape/src/line.js","../node_modules/d3-shape/src/area.js","../node_modules/d3-shape/src/symbol/circle.js","../node_modules/d3-shape/src/symbol.js","../src/path/shapes.ts","../node_modules/as-number/index.js","../node_modules/gl-vec2/copy.js","../node_modules/gl-vec2/scaleAndAdd.js","../node_modules/gl-vec2/dot.js","../node_modules/extrude-polyline/vecutil.js","../node_modules/gl-vec2/add.js","../node_modules/gl-vec2/set.js","../node_modules/gl-vec2/normalize.js","../node_modules/gl-vec2/subtract.js","../node_modules/polyline-miter-util/index.js","../node_modules/extrude-polyline/index.js","../src/path/geometryForItem.ts","../src/marks/arc.ts","../src/marks/area.ts","../src/util/visit.ts","../src/util/arrays.ts","../src/marks/group.ts","../src/marks/line.ts","../src/marks/rect.ts","../src/marks/rule.ts","../src/marks/symbol.ts","../src/marks/text.ts","../src/marks/path.ts","../src/marks/shape.ts","../src/marks/image.ts","../src/marks/index.ts","../node_modules/vega-util/build/vega-util.module.js","../src/WebGPURenderer.ts","../index.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n",null,null,null,null,null,null,"\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n","function getSqDist(p1, p2) {\n    var dx = p1[0] - p2[0],\n        dy = p1[1] - p2[1];\n\n    return dx * dx + dy * dy;\n}\n\n// basic distance-based simplification\nmodule.exports = function simplifyRadialDist(points, tolerance) {\n    if (points.length<=1)\n        return points;\n    tolerance = typeof tolerance === 'number' ? tolerance : 1;\n    var sqTolerance = tolerance * tolerance;\n    \n    var prevPoint = points[0],\n        newPoints = [prevPoint],\n        point;\n\n    for (var i = 1, len = points.length; i < len; i++) {\n        point = points[i];\n\n        if (getSqDist(point, prevPoint) > sqTolerance) {\n            newPoints.push(point);\n            prevPoint = point;\n        }\n    }\n\n    if (prevPoint !== point) newPoints.push(point);\n\n    return newPoints;\n}","// square distance from a point to a segment\nfunction getSqSegDist(p, p1, p2) {\n    var x = p1[0],\n        y = p1[1],\n        dx = p2[0] - x,\n        dy = p2[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2[0];\n            y = p2[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p[0] - x;\n    dy = p[1] - y;\n\n    return dx * dx + dy * dy;\n}\n\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n    var maxSqDist = sqTolerance,\n        index;\n\n    for (var i = first + 1; i < last; i++) {\n        var sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n        if (sqDist > maxSqDist) {\n            index = i;\n            maxSqDist = sqDist;\n        }\n    }\n\n    if (maxSqDist > sqTolerance) {\n        if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\n        simplified.push(points[index]);\n        if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nmodule.exports = function simplifyDouglasPeucker(points, tolerance) {\n    if (points.length<=1)\n        return points;\n    tolerance = typeof tolerance === 'number' ? tolerance : 1;\n    var sqTolerance = tolerance * tolerance;\n    \n    var last = points.length - 1;\n\n    var simplified = [points[0]];\n    simplifyDPStep(points, 0, last, sqTolerance, simplified);\n    simplified.push(points[last]);\n\n    return simplified;\n}\n","var simplifyRadialDist = require('./radial-distance')\nvar simplifyDouglasPeucker = require('./douglas-peucker')\n\n//simplifies using both algorithms\nmodule.exports = function simplify(points, tolerance) {\n    points = simplifyRadialDist(points, tolerance);\n    points = simplifyDouglasPeucker(points, tolerance);\n    return points;\n}\n\nmodule.exports.radialDistance = simplifyRadialDist;\nmodule.exports.douglasPeucker = simplifyDouglasPeucker;","function clone(point) { //TODO: use gl-vec2 for this\n    return [point[0], point[1]]\n}\n\nfunction vec2(x, y) {\n    return [x, y]\n}\n\nmodule.exports = function createBezierBuilder(opt) {\n    opt = opt||{}\n\n    var RECURSION_LIMIT = typeof opt.recursion === 'number' ? opt.recursion : 8\n    var FLT_EPSILON = typeof opt.epsilon === 'number' ? opt.epsilon : 1.19209290e-7\n    var PATH_DISTANCE_EPSILON = typeof opt.pathEpsilon === 'number' ? opt.pathEpsilon : 1.0\n\n    var curve_angle_tolerance_epsilon = typeof opt.angleEpsilon === 'number' ? opt.angleEpsilon : 0.01\n    var m_angle_tolerance = opt.angleTolerance || 0\n    var m_cusp_limit = opt.cuspLimit || 0\n\n    return function bezierCurve(start, c1, c2, end, scale, points) {\n        if (!points)\n            points = []\n\n        scale = typeof scale === 'number' ? scale : 1.0\n        var distanceTolerance = PATH_DISTANCE_EPSILON / scale\n        distanceTolerance *= distanceTolerance\n        begin(start, c1, c2, end, points, distanceTolerance)\n        return points\n    }\n\n\n    ////// Based on:\n    ////// https://github.com/pelson/antigrain/blob/master/agg-2.4/src/agg_curves.cpp\n\n    function begin(start, c1, c2, end, points, distanceTolerance) {\n        points.push(clone(start))\n        var x1 = start[0],\n            y1 = start[1],\n            x2 = c1[0],\n            y2 = c1[1],\n            x3 = c2[0],\n            y3 = c2[1],\n            x4 = end[0],\n            y4 = end[1]\n        recursive(x1, y1, x2, y2, x3, y3, x4, y4, points, distanceTolerance, 0)\n        points.push(clone(end))\n    }\n\n    function recursive(x1, y1, x2, y2, x3, y3, x4, y4, points, distanceTolerance, level) {\n        if(level > RECURSION_LIMIT) \n            return\n\n        var pi = Math.PI\n\n        // Calculate all the mid-points of the line segments\n        //----------------------\n        var x12   = (x1 + x2) / 2\n        var y12   = (y1 + y2) / 2\n        var x23   = (x2 + x3) / 2\n        var y23   = (y2 + y3) / 2\n        var x34   = (x3 + x4) / 2\n        var y34   = (y3 + y4) / 2\n        var x123  = (x12 + x23) / 2\n        var y123  = (y12 + y23) / 2\n        var x234  = (x23 + x34) / 2\n        var y234  = (y23 + y34) / 2\n        var x1234 = (x123 + x234) / 2\n        var y1234 = (y123 + y234) / 2\n\n        if(level > 0) { // Enforce subdivision first time\n            // Try to approximate the full cubic curve by a single straight line\n            //------------------\n            var dx = x4-x1\n            var dy = y4-y1\n\n            var d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx)\n            var d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx)\n\n            var da1, da2\n\n            if(d2 > FLT_EPSILON && d3 > FLT_EPSILON) {\n                // Regular care\n                //-----------------\n                if((d2 + d3)*(d2 + d3) <= distanceTolerance * (dx*dx + dy*dy)) {\n                    // If the curvature doesn't exceed the distanceTolerance value\n                    // we tend to finish subdivisions.\n                    //----------------------\n                    if(m_angle_tolerance < curve_angle_tolerance_epsilon) {\n                        points.push(vec2(x1234, y1234))\n                        return\n                    }\n\n                    // Angle & Cusp Condition\n                    //----------------------\n                    var a23 = Math.atan2(y3 - y2, x3 - x2)\n                    da1 = Math.abs(a23 - Math.atan2(y2 - y1, x2 - x1))\n                    da2 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - a23)\n                    if(da1 >= pi) da1 = 2*pi - da1\n                    if(da2 >= pi) da2 = 2*pi - da2\n\n                    if(da1 + da2 < m_angle_tolerance) {\n                        // Finally we can stop the recursion\n                        //----------------------\n                        points.push(vec2(x1234, y1234))\n                        return\n                    }\n\n                    if(m_cusp_limit !== 0.0) {\n                        if(da1 > m_cusp_limit) {\n                            points.push(vec2(x2, y2))\n                            return\n                        }\n\n                        if(da2 > m_cusp_limit) {\n                            points.push(vec2(x3, y3))\n                            return\n                        }\n                    }\n                }\n            }\n            else {\n                if(d2 > FLT_EPSILON) {\n                    // p1,p3,p4 are collinear, p2 is considerable\n                    //----------------------\n                    if(d2 * d2 <= distanceTolerance * (dx*dx + dy*dy)) {\n                        if(m_angle_tolerance < curve_angle_tolerance_epsilon) {\n                            points.push(vec2(x1234, y1234))\n                            return\n                        }\n\n                        // Angle Condition\n                        //----------------------\n                        da1 = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1))\n                        if(da1 >= pi) da1 = 2*pi - da1\n\n                        if(da1 < m_angle_tolerance) {\n                            points.push(vec2(x2, y2))\n                            points.push(vec2(x3, y3))\n                            return\n                        }\n\n                        if(m_cusp_limit !== 0.0) {\n                            if(da1 > m_cusp_limit) {\n                                points.push(vec2(x2, y2))\n                                return\n                            }\n                        }\n                    }\n                }\n                else if(d3 > FLT_EPSILON) {\n                    // p1,p2,p4 are collinear, p3 is considerable\n                    //----------------------\n                    if(d3 * d3 <= distanceTolerance * (dx*dx + dy*dy)) {\n                        if(m_angle_tolerance < curve_angle_tolerance_epsilon) {\n                            points.push(vec2(x1234, y1234))\n                            return\n                        }\n\n                        // Angle Condition\n                        //----------------------\n                        da1 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y3 - y2, x3 - x2))\n                        if(da1 >= pi) da1 = 2*pi - da1\n\n                        if(da1 < m_angle_tolerance) {\n                            points.push(vec2(x2, y2))\n                            points.push(vec2(x3, y3))\n                            return\n                        }\n\n                        if(m_cusp_limit !== 0.0) {\n                            if(da1 > m_cusp_limit)\n                            {\n                                points.push(vec2(x3, y3))\n                                return\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Collinear case\n                    //-----------------\n                    dx = x1234 - (x1 + x4) / 2\n                    dy = y1234 - (y1 + y4) / 2\n                    if(dx*dx + dy*dy <= distanceTolerance) {\n                        points.push(vec2(x1234, y1234))\n                        return\n                    }\n                }\n            }\n        }\n\n        // Continue subdivision\n        //----------------------\n        recursive(x1, y1, x12, y12, x123, y123, x1234, y1234, points, distanceTolerance, level + 1) \n        recursive(x1234, y1234, x234, y234, x34, y34, x4, y4, points, distanceTolerance, level + 1) \n    }\n}\n","module.exports = require('./function')()","\nmodule.exports = absolutize\n\n/**\n * redefine `path` with absolute coordinates\n *\n * @param {Array} path\n * @return {Array}\n */\n\nfunction absolutize(path){\n\tvar startX = 0\n\tvar startY = 0\n\tvar x = 0\n\tvar y = 0\n\n\treturn path.map(function(seg){\n\t\tseg = seg.slice()\n\t\tvar type = seg[0]\n\t\tvar command = type.toUpperCase()\n\n\t\t// is relative\n\t\tif (type != command) {\n\t\t\tseg[0] = command\n\t\t\tswitch (type) {\n\t\t\t\tcase 'a':\n\t\t\t\t\tseg[6] += x\n\t\t\t\t\tseg[7] += y\n\t\t\t\t\tbreak\n\t\t\t\tcase 'v':\n\t\t\t\t\tseg[1] += y\n\t\t\t\t\tbreak\n\t\t\t\tcase 'h':\n\t\t\t\t\tseg[1] += x\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tfor (var i = 1; i < seg.length;) {\n\t\t\t\t\t\tseg[i++] += x\n\t\t\t\t\t\tseg[i++] += y\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// update cursor state\n\t\tswitch (command) {\n\t\t\tcase 'Z':\n\t\t\t\tx = startX\n\t\t\t\ty = startY\n\t\t\t\tbreak\n\t\t\tcase 'H':\n\t\t\t\tx = seg[1]\n\t\t\t\tbreak\n\t\t\tcase 'V':\n\t\t\t\ty = seg[1]\n\t\t\t\tbreak\n\t\t\tcase 'M':\n\t\t\t\tx = startX = seg[1]\n\t\t\t\ty = startY = seg[2]\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tx = seg[seg.length - 2]\n\t\t\t\ty = seg[seg.length - 1]\n\t\t}\n\n\t\treturn seg\n\t})\n}\n","\nvar π = Math.PI\nvar _120 = radians(120)\n\nmodule.exports = normalize\n\n/**\n * describe `path` in terms of cubic bézier \n * curves and move commands\n *\n * @param {Array} path\n * @return {Array}\n */\n\nfunction normalize(path){\n\t// init state\n\tvar prev\n\tvar result = []\n\tvar bezierX = 0\n\tvar bezierY = 0\n\tvar startX = 0\n\tvar startY = 0\n\tvar quadX = null\n\tvar quadY = null\n\tvar x = 0\n\tvar y = 0\n\n\tfor (var i = 0, len = path.length; i < len; i++) {\n\t\tvar seg = path[i]\n\t\tvar command = seg[0]\n\t\tswitch (command) {\n\t\t\tcase 'M':\n\t\t\t\tstartX = seg[1]\n\t\t\t\tstartY = seg[2]\n\t\t\t\tbreak\n\t\t\tcase 'A':\n\t\t\t\tseg = arc(x, y,seg[1],seg[2],radians(seg[3]),seg[4],seg[5],seg[6],seg[7])\n\t\t\t\t// split multi part\n\t\t\t\tseg.unshift('C')\n\t\t\t\tif (seg.length > 7) {\n\t\t\t\t\tresult.push(seg.splice(0, 7))\n\t\t\t\t\tseg.unshift('C')\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase 'S':\n\t\t\t\t// default control point\n\t\t\t\tvar cx = x\n\t\t\t\tvar cy = y\n\t\t\t\tif (prev == 'C' || prev == 'S') {\n\t\t\t\t\tcx += cx - bezierX // reflect the previous command's control\n\t\t\t\t\tcy += cy - bezierY // point relative to the current point\n\t\t\t\t}\n\t\t\t\tseg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]]\n\t\t\t\tbreak\n\t\t\tcase 'T':\n\t\t\t\tif (prev == 'Q' || prev == 'T') {\n\t\t\t\t\tquadX = x * 2 - quadX // as with 'S' reflect previous control point\n\t\t\t\t\tquadY = y * 2 - quadY\n\t\t\t\t} else {\n\t\t\t\t\tquadX = x\n\t\t\t\t\tquadY = y\n\t\t\t\t}\n\t\t\t\tseg = quadratic(x, y, quadX, quadY, seg[1], seg[2])\n\t\t\t\tbreak\n\t\t\tcase 'Q':\n\t\t\t\tquadX = seg[1]\n\t\t\t\tquadY = seg[2]\n\t\t\t\tseg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4])\n\t\t\t\tbreak\n\t\t\tcase 'L':\n\t\t\t\tseg = line(x, y, seg[1], seg[2])\n\t\t\t\tbreak\n\t\t\tcase 'H':\n\t\t\t\tseg = line(x, y, seg[1], y)\n\t\t\t\tbreak\n\t\t\tcase 'V':\n\t\t\t\tseg = line(x, y, x, seg[1])\n\t\t\t\tbreak\n\t\t\tcase 'Z':\n\t\t\t\tseg = line(x, y, startX, startY)\n\t\t\t\tbreak\n\t\t}\n\n\t\t// update state\n\t\tprev = command\n\t\tx = seg[seg.length - 2]\n\t\ty = seg[seg.length - 1]\n\t\tif (seg.length > 4) {\n\t\t\tbezierX = seg[seg.length - 4]\n\t\t\tbezierY = seg[seg.length - 3]\n\t\t} else {\n\t\t\tbezierX = x\n\t\t\tbezierY = y\n\t\t}\n\t\tresult.push(seg)\n\t}\n\n\treturn result\n}\n\nfunction line(x1, y1, x2, y2){\n\treturn ['C', x1, y1, x2, y2, x2, y2]\n}\n\nfunction quadratic(x1, y1, cx, cy, x2, y2){\n\treturn [\n\t\t'C',\n\t\tx1/3 + (2/3) * cx,\n\t\ty1/3 + (2/3) * cy,\n\t\tx2/3 + (2/3) * cx,\n\t\ty2/3 + (2/3) * cy,\n\t\tx2,\n\t\ty2\n\t]\n}\n\n// This function is ripped from \n// github.com/DmitryBaranovskiy/raphael/blob/4d97d4/raphael.js#L2216-L2304 \n// which references w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n// TODO: make it human readable\n\nfunction arc(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\tif (!recursive) {\n\t\tvar xy = rotate(x1, y1, -angle)\n\t\tx1 = xy.x\n\t\ty1 = xy.y\n\t\txy = rotate(x2, y2, -angle)\n\t\tx2 = xy.x\n\t\ty2 = xy.y\n\t\tvar x = (x1 - x2) / 2\n\t\tvar y = (y1 - y2) / 2\n\t\tvar h = (x * x) / (rx * rx) + (y * y) / (ry * ry)\n\t\tif (h > 1) {\n\t\t\th = Math.sqrt(h)\n\t\t\trx = h * rx\n\t\t\try = h * ry\n\t\t}\n\t\tvar rx2 = rx * rx\n\t\tvar ry2 = ry * ry\n\t\tvar k = (large_arc_flag == sweep_flag ? -1 : 1)\n\t\t\t* Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)))\n\t\tif (k == Infinity) k = 1 // neutralize\n\t\tvar cx = k * rx * y / ry + (x1 + x2) / 2\n\t\tvar cy = k * -ry * x / rx + (y1 + y2) / 2\n\t\tvar f1 = Math.asin(((y1 - cy) / ry).toFixed(9))\n\t\tvar f2 = Math.asin(((y2 - cy) / ry).toFixed(9))\n\n\t\tf1 = x1 < cx ? π - f1 : f1\n\t\tf2 = x2 < cx ? π - f2 : f2\n\t\tif (f1 < 0) f1 = π * 2 + f1\n\t\tif (f2 < 0) f2 = π * 2 + f2\n\t\tif (sweep_flag && f1 > f2) f1 = f1 - π * 2\n\t\tif (!sweep_flag && f2 > f1) f2 = f2 - π * 2\n\t} else {\n\t\tf1 = recursive[0]\n\t\tf2 = recursive[1]\n\t\tcx = recursive[2]\n\t\tcy = recursive[3]\n\t}\n\t// greater than 120 degrees requires multiple segments\n\tif (Math.abs(f2 - f1) > _120) {\n\t\tvar f2old = f2\n\t\tvar x2old = x2\n\t\tvar y2old = y2\n\t\tf2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1)\n\t\tx2 = cx + rx * Math.cos(f2)\n\t\ty2 = cy + ry * Math.sin(f2)\n\t\tvar res = arc(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy])\n\t}\n\tvar t = Math.tan((f2 - f1) / 4)\n\tvar hx = 4 / 3 * rx * t\n\tvar hy = 4 / 3 * ry * t\n\tvar curve = [\n\t\t2 * x1 - (x1 + hx * Math.sin(f1)),\n\t\t2 * y1 - (y1 - hy * Math.cos(f1)),\n\t\tx2 + hx * Math.sin(f2),\n\t\ty2 - hy * Math.cos(f2),\n\t\tx2,\n\t\ty2\n\t]\n\tif (recursive) return curve\n\tif (res) curve = curve.concat(res)\n\tfor (var i = 0; i < curve.length;) {\n\t\tvar rot = rotate(curve[i], curve[i+1], angle)\n\t\tcurve[i++] = rot.x\n\t\tcurve[i++] = rot.y\n\t}\n\treturn curve\n}\n\nfunction rotate(x, y, rad){\n\treturn {\n\t\tx: x * Math.cos(rad) - y * Math.sin(rad),\n\t\ty: x * Math.sin(rad) + y * Math.cos(rad)\n\t}\n}\n\nfunction radians(degress){\n\treturn degress * (π / 180)\n}\n","module.exports = function vec2Copy(out, a) {\n    out[0] = a[0]\n    out[1] = a[1]\n    return out\n}","var bezier = require('adaptive-bezier-curve')\nvar abs = require('abs-svg-path')\nvar norm = require('normalize-svg-path')\nvar copy = require('vec2-copy')\n\nfunction set(out, x, y) {\n    out[0] = x\n    out[1] = y\n    return out\n}\n\nvar tmp1 = [0,0],\n    tmp2 = [0,0],\n    tmp3 = [0,0]\n\nfunction bezierTo(points, scale, start, seg) {\n    bezier(start, \n        set(tmp1, seg[1], seg[2]), \n        set(tmp2, seg[3], seg[4]),\n        set(tmp3, seg[5], seg[6]), scale, points)\n}\n\nmodule.exports = function contours(svg, scale) {\n    var paths = []\n\n    var points = []\n    var pen = [0, 0]\n    norm(abs(svg)).forEach(function(segment, i, self) {\n        if (segment[0] === 'M') {\n            copy(pen, segment.slice(1))\n            if (points.length>0) {\n                paths.push(points)\n                points = []\n            }\n        } else if (segment[0] === 'C') {\n            bezierTo(points, scale, pen, segment)\n            set(pen, segment[5], segment[6])\n        } else {\n            throw new Error('illegal type in SVG: '+segment[0])\n        }\n    })\n    if (points.length>0)\n        paths.push(points)\n    return paths\n}","/*\n** SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008) \n** Copyright (C) [dates of first publication] Silicon Graphics, Inc.\n** All Rights Reserved.\n**\n** Permission is hereby granted, free of charge, to any person obtaining a copy\n** of this software and associated documentation files (the \"Software\"), to deal\n** in the Software without restriction, including without limitation the rights\n** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n** of the Software, and to permit persons to whom the Software is furnished to do so,\n** subject to the following conditions:\n** \n** The above copyright notice including the dates of first publication and either this\n** permission notice or a reference to http://oss.sgi.com/projects/FreeB/ shall be\n** included in all copies or substantial portions of the Software. \n**\n** THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n** INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n** PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL SILICON GRAPHICS, INC.\n** BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\n** OR OTHER DEALINGS IN THE SOFTWARE.\n** \n** Except as contained in this notice, the name of Silicon Graphics, Inc. shall not\n** be used in advertising or otherwise to promote the sale, use or other dealings in\n** this Software without prior written authorization from Silicon Graphics, Inc.\n*/\n/*\n** Author: Mikko Mononen, Aug 2013.\n** The code is based on GLU libtess by Eric Veach, July 1994\n*/\n\n\t\"use strict\";\n\n\t/* Public API */\n\n\tvar Tess2 = {};\n\n\tmodule.exports = Tess2;\n\t\n\tTess2.WINDING_ODD = 0;\n\tTess2.WINDING_NONZERO = 1;\n\tTess2.WINDING_POSITIVE = 2;\n\tTess2.WINDING_NEGATIVE = 3;\n\tTess2.WINDING_ABS_GEQ_TWO = 4;\n\n\tTess2.POLYGONS = 0;\n\tTess2.CONNECTED_POLYGONS = 1;\n\tTess2.BOUNDARY_CONTOURS = 2;\n\n\tTess2.tesselate = function(opts) {\n\t\tvar debug =  opts.debug || false;\n\t\tvar tess = new Tesselator();\n\t\tfor (var i = 0; i < opts.contours.length; i++) {\n\t\t\ttess.addContour(opts.vertexSize || 2, opts.contours[i]);\n\t\t}\n\t\ttess.tesselate(opts.windingRule || Tess2.WINDING_ODD,\n\t\t\t\t\t   opts.elementType || Tess2.POLYGONS,\n\t\t\t\t\t   opts.polySize || 3,\n\t\t\t\t\t   opts.vertexSize || 2,\n\t\t\t\t\t   opts.normal || [0,0,1]);\n\t\treturn {\n\t\t\tvertices: tess.vertices,\n\t\t\tvertexIndices: tess.vertexIndices,\n\t\t\tvertexCount: tess.vertexCount,\n\t\t\telements: tess.elements,\n\t\t\telementCount: tess.elementCount,\n\t\t\tmesh: debug ? tess.mesh : undefined\n\t\t};\n\t};\n\n\t/* Internal */\n\n\tvar assert = function(cond) {\n\t\tif (!cond) {\n\t\t\tthrow \"Assertion Failed!\";\n\t\t}\n\t}\n\n\t/* The mesh structure is similar in spirit, notation, and operations\n\t* to the \"quad-edge\" structure (see L. Guibas and J. Stolfi, Primitives\n\t* for the manipulation of general subdivisions and the computation of\n\t* Voronoi diagrams, ACM Transactions on Graphics, 4(2):74-123, April 1985).\n\t* For a simplified description, see the course notes for CS348a,\n\t* \"Mathematical Foundations of Computer Graphics\", available at the\n\t* Stanford bookstore (and taught during the fall quarter).\n\t* The implementation also borrows a tiny subset of the graph-based approach\n\t* use in Mantyla's Geometric Work Bench (see M. Mantyla, An Introduction\n\t* to Sold Modeling, Computer Science Press, Rockville, Maryland, 1988).\n\t*\n\t* The fundamental data structure is the \"half-edge\".  Two half-edges\n\t* go together to make an edge, but they point in opposite directions.\n\t* Each half-edge has a pointer to its mate (the \"symmetric\" half-edge Sym),\n\t* its origin vertex (Org), the face on its left side (Lface), and the\n\t* adjacent half-edges in the CCW direction around the origin vertex\n\t* (Onext) and around the left face (Lnext).  There is also a \"next\"\n\t* pointer for the global edge list (see below).\n\t*\n\t* The notation used for mesh navigation:\n\t*  Sym   = the mate of a half-edge (same edge, but opposite direction)\n\t*  Onext = edge CCW around origin vertex (keep same origin)\n\t*  Dnext = edge CCW around destination vertex (keep same dest)\n\t*  Lnext = edge CCW around left face (dest becomes new origin)\n\t*  Rnext = edge CCW around right face (origin becomes new dest)\n\t*\n\t* \"prev\" means to substitute CW for CCW in the definitions above.\n\t*\n\t* The mesh keeps global lists of all vertices, faces, and edges,\n\t* stored as doubly-linked circular lists with a dummy header node.\n\t* The mesh stores pointers to these dummy headers (vHead, fHead, eHead).\n\t*\n\t* The circular edge list is special; since half-edges always occur\n\t* in pairs (e and e->Sym), each half-edge stores a pointer in only\n\t* one direction.  Starting at eHead and following the e->next pointers\n\t* will visit each *edge* once (ie. e or e->Sym, but not both).\n\t* e->Sym stores a pointer in the opposite direction, thus it is\n\t* always true that e->Sym->next->Sym->next == e.\n\t*\n\t* Each vertex has a pointer to next and previous vertices in the\n\t* circular list, and a pointer to a half-edge with this vertex as\n\t* the origin (NULL if this is the dummy header).  There is also a\n\t* field \"data\" for client data.\n\t*\n\t* Each face has a pointer to the next and previous faces in the\n\t* circular list, and a pointer to a half-edge with this face as\n\t* the left face (NULL if this is the dummy header).  There is also\n\t* a field \"data\" for client data.\n\t*\n\t* Note that what we call a \"face\" is really a loop; faces may consist\n\t* of more than one loop (ie. not simply connected), but there is no\n\t* record of this in the data structure.  The mesh may consist of\n\t* several disconnected regions, so it may not be possible to visit\n\t* the entire mesh by starting at a half-edge and traversing the edge\n\t* structure.\n\t*\n\t* The mesh does NOT support isolated vertices; a vertex is deleted along\n\t* with its last edge.  Similarly when two faces are merged, one of the\n\t* faces is deleted (see tessMeshDelete below).  For mesh operations,\n\t* all face (loop) and vertex pointers must not be NULL.  However, once\n\t* mesh manipulation is finished, TESSmeshZapFace can be used to delete\n\t* faces of the mesh, one at a time.  All external faces can be \"zapped\"\n\t* before the mesh is returned to the client; then a NULL face indicates\n\t* a region which is not part of the output polygon.\n\t*/\n\n\tfunction TESSvertex() {\n\t\tthis.next = null;\t/* next vertex (never NULL) */\n\t\tthis.prev = null;\t/* previous vertex (never NULL) */\n\t\tthis.anEdge = null;\t/* a half-edge with this origin */\n\n\t\t/* Internal data (keep hidden) */\n\t\tthis.coords = [0,0,0];\t/* vertex location in 3D */\n\t\tthis.s = 0.0;\n\t\tthis.t = 0.0;\t\t\t/* projection onto the sweep plane */\n\t\tthis.pqHandle = 0;\t\t/* to allow deletion from priority queue */\n\t\tthis.n = 0;\t\t\t\t/* to allow identify unique vertices */\n\t\tthis.idx = 0;\t\t\t/* to allow map result to original verts */\n\t} \n\n\tfunction TESSface() {\n\t\tthis.next = null;\t\t/* next face (never NULL) */\n\t\tthis.prev = null;\t\t/* previous face (never NULL) */\n\t\tthis.anEdge = null;\t\t/* a half edge with this left face */\n\n\t\t/* Internal data (keep hidden) */\n\t\tthis.trail = null;\t\t/* \"stack\" for conversion to strips */\n\t\tthis.n = 0;\t\t\t\t/* to allow identiy unique faces */\n\t\tthis.marked = false;\t/* flag for conversion to strips */\n\t\tthis.inside = false;\t/* this face is in the polygon interior */\n\t};\n\n\tfunction TESShalfEdge(side) {\n\t\tthis.next = null;\t\t/* doubly-linked list (prev==Sym->next) */\n\t\tthis.Sym = null;\t\t/* same edge, opposite direction */\n\t\tthis.Onext = null;\t\t/* next edge CCW around origin */\n\t\tthis.Lnext = null;\t\t/* next edge CCW around left face */\n\t\tthis.Org = null;\t\t/* origin vertex (Overtex too long) */\n\t\tthis.Lface = null;\t\t/* left face */\n\n\t\t/* Internal data (keep hidden) */\n\t\tthis.activeRegion = null;\t/* a region with this upper edge (sweep.c) */\n\t\tthis.winding = 0;\t\t\t/* change in winding number when crossing\n\t\t\t\t\t\t\t\t\t   from the right face to the left face */\n\t\tthis.side = side;\n\t};\n\n\tTESShalfEdge.prototype = {\n\t\tget Rface() { return this.Sym.Lface; },\n\t\tset Rface(v) { this.Sym.Lface = v; },\n\t\tget Dst() { return this.Sym.Org; },\n\t\tset Dst(v) { this.Sym.Org = v; },\n\t\tget Oprev() { return this.Sym.Lnext; },\n\t\tset Oprev(v) { this.Sym.Lnext = v; },\n\t\tget Lprev() { return this.Onext.Sym; },\n\t\tset Lprev(v) { this.Onext.Sym = v; },\n\t\tget Dprev() { return this.Lnext.Sym; },\n\t\tset Dprev(v) { this.Lnext.Sym = v; },\n\t\tget Rprev() { return this.Sym.Onext; },\n\t\tset Rprev(v) { this.Sym.Onext = v; },\n\t\tget Dnext() { return /*this.Rprev*/this.Sym.Onext.Sym; },  /* 3 pointers */\n\t\tset Dnext(v) { /*this.Rprev*/this.Sym.Onext.Sym = v; },  /* 3 pointers */\n\t\tget Rnext() { return /*this.Oprev*/this.Sym.Lnext.Sym; },  /* 3 pointers */\n\t\tset Rnext(v) { /*this.Oprev*/this.Sym.Lnext.Sym = v; },  /* 3 pointers */\n\t};\n\n\n\n\tfunction TESSmesh() {\n\t\tvar v = new TESSvertex();\n\t\tvar f = new TESSface();\n\t\tvar e = new TESShalfEdge(0);\n\t\tvar eSym = new TESShalfEdge(1);\n\n\t\tv.next = v.prev = v;\n\t\tv.anEdge = null;\n\n\t\tf.next = f.prev = f;\n\t\tf.anEdge = null;\n\t\tf.trail = null;\n\t\tf.marked = false;\n\t\tf.inside = false;\n\n\t\te.next = e;\n\t\te.Sym = eSym;\n\t\te.Onext = null;\n\t\te.Lnext = null;\n\t\te.Org = null;\n\t\te.Lface = null;\n\t\te.winding = 0;\n\t\te.activeRegion = null;\n\n\t\teSym.next = eSym;\n\t\teSym.Sym = e;\n\t\teSym.Onext = null;\n\t\teSym.Lnext = null;\n\t\teSym.Org = null;\n\t\teSym.Lface = null;\n\t\teSym.winding = 0;\n\t\teSym.activeRegion = null;\n\n\t\tthis.vHead = v;\t\t/* dummy header for vertex list */\n\t\tthis.fHead = f;\t\t/* dummy header for face list */\n\t\tthis.eHead = e;\t\t/* dummy header for edge list */\n\t\tthis.eHeadSym = eSym;\t/* and its symmetric counterpart */\n\t};\n\n\t/* The mesh operations below have three motivations: completeness,\n\t* convenience, and efficiency.  The basic mesh operations are MakeEdge,\n\t* Splice, and Delete.  All the other edge operations can be implemented\n\t* in terms of these.  The other operations are provided for convenience\n\t* and/or efficiency.\n\t*\n\t* When a face is split or a vertex is added, they are inserted into the\n\t* global list *before* the existing vertex or face (ie. e->Org or e->Lface).\n\t* This makes it easier to process all vertices or faces in the global lists\n\t* without worrying about processing the same data twice.  As a convenience,\n\t* when a face is split, the \"inside\" flag is copied from the old face.\n\t* Other internal data (v->data, v->activeRegion, f->data, f->marked,\n\t* f->trail, e->winding) is set to zero.\n\t*\n\t* ********************** Basic Edge Operations **************************\n\t*\n\t* tessMeshMakeEdge( mesh ) creates one edge, two vertices, and a loop.\n\t* The loop (face) consists of the two new half-edges.\n\t*\n\t* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\n\t* mesh connectivity and topology.  It changes the mesh so that\n\t*  eOrg->Onext <- OLD( eDst->Onext )\n\t*  eDst->Onext <- OLD( eOrg->Onext )\n\t* where OLD(...) means the value before the meshSplice operation.\n\t*\n\t* This can have two effects on the vertex structure:\n\t*  - if eOrg->Org != eDst->Org, the two vertices are merged together\n\t*  - if eOrg->Org == eDst->Org, the origin is split into two vertices\n\t* In both cases, eDst->Org is changed and eOrg->Org is untouched.\n\t*\n\t* Similarly (and independently) for the face structure,\n\t*  - if eOrg->Lface == eDst->Lface, one loop is split into two\n\t*  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\n\t* In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\n\t*\n\t* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\n\t* if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\n\t* eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\n\t* the newly created loop will contain eDel->Dst.  If the deletion of eDel\n\t* would create isolated vertices, those are deleted as well.\n\t*\n\t* ********************** Other Edge Operations **************************\n\t*\n\t* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\n\t* eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\n\t* eOrg and eNew will have the same left face.\n\t*\n\t* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\n\t* such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\n\t* eOrg and eNew will have the same left face.\n\t*\n\t* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\n\t* to eDst->Org, and returns the corresponding half-edge eNew.\n\t* If eOrg->Lface == eDst->Lface, this splits one loop into two,\n\t* and the newly created loop is eNew->Lface.  Otherwise, two disjoint\n\t* loops are merged into one, and the loop eDst->Lface is destroyed.\n\t*\n\t* ************************ Other Operations *****************************\n\t*\n\t* tessMeshNewMesh() creates a new mesh with no edges, no vertices,\n\t* and no loops (what we usually call a \"face\").\n\t*\n\t* tessMeshUnion( mesh1, mesh2 ) forms the union of all structures in\n\t* both meshes, and returns the new mesh (the old meshes are destroyed).\n\t*\n\t* tessMeshDeleteMesh( mesh ) will free all storage for any valid mesh.\n\t*\n\t* tessMeshZapFace( fZap ) destroys a face and removes it from the\n\t* global face list.  All edges of fZap will have a NULL pointer as their\n\t* left face.  Any edges which also have a NULL pointer as their right face\n\t* are deleted entirely (along with any isolated vertices this produces).\n\t* An entire mesh can be deleted by zapping its faces, one at a time,\n\t* in any order.  Zapped faces cannot be used in further mesh operations!\n\t*\n\t* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\n\t*/\n\n\tTESSmesh.prototype = {\n\n\t\t/* MakeEdge creates a new pair of half-edges which form their own loop.\n\t\t* No vertex or face structures are allocated, but these must be assigned\n\t\t* before the current edge operation is completed.\n\t\t*/\n\t\t//static TESShalfEdge *MakeEdge( TESSmesh* mesh, TESShalfEdge *eNext )\n\t\tmakeEdge_: function(eNext) {\n\t\t\tvar e = new TESShalfEdge(0);\n\t\t\tvar eSym = new TESShalfEdge(1);\n\n\t\t\t/* Make sure eNext points to the first edge of the edge pair */\n\t\t\tif( eNext.Sym.side < eNext.side ) { eNext = eNext.Sym; }\n\n\t\t\t/* Insert in circular doubly-linked list before eNext.\n\t\t\t* Note that the prev pointer is stored in Sym->next.\n\t\t\t*/\n\t\t\tvar ePrev = eNext.Sym.next;\n\t\t\teSym.next = ePrev;\n\t\t\tePrev.Sym.next = e;\n\t\t\te.next = eNext;\n\t\t\teNext.Sym.next = eSym;\n\n\t\t\te.Sym = eSym;\n\t\t\te.Onext = e;\n\t\t\te.Lnext = eSym;\n\t\t\te.Org = null;\n\t\t\te.Lface = null;\n\t\t\te.winding = 0;\n\t\t\te.activeRegion = null;\n\n\t\t\teSym.Sym = e;\n\t\t\teSym.Onext = eSym;\n\t\t\teSym.Lnext = e;\n\t\t\teSym.Org = null;\n\t\t\teSym.Lface = null;\n\t\t\teSym.winding = 0;\n\t\t\teSym.activeRegion = null;\n\n\t\t\treturn e;\n\t\t},\n\n\t\t/* Splice( a, b ) is best described by the Guibas/Stolfi paper or the\n\t\t* CS348a notes (see mesh.h).  Basically it modifies the mesh so that\n\t\t* a->Onext and b->Onext are exchanged.  This can have various effects\n\t\t* depending on whether a and b belong to different face or vertex rings.\n\t\t* For more explanation see tessMeshSplice() below.\n\t\t*/\n\t\t// static void Splice( TESShalfEdge *a, TESShalfEdge *b )\n\t\tsplice_: function(a, b) {\n\t\t\tvar aOnext = a.Onext;\n\t\t\tvar bOnext = b.Onext;\n\t\t\taOnext.Sym.Lnext = b;\n\t\t\tbOnext.Sym.Lnext = a;\n\t\t\ta.Onext = bOnext;\n\t\t\tb.Onext = aOnext;\n\t\t},\n\n\t\t/* MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the\n\t\t* origin of all edges in the vertex loop to which eOrig belongs. \"vNext\" gives\n\t\t* a place to insert the new vertex in the global vertex list.  We insert\n\t\t* the new vertex *before* vNext so that algorithms which walk the vertex\n\t\t* list will not see the newly created vertices.\n\t\t*/\n\t\t//static void MakeVertex( TESSvertex *newVertex, TESShalfEdge *eOrig, TESSvertex *vNext )\n\t\tmakeVertex_: function(newVertex, eOrig, vNext) {\n\t\t\tvar vNew = newVertex;\n\t\t\tassert(vNew !== null);\n\n\t\t\t/* insert in circular doubly-linked list before vNext */\n\t\t\tvar vPrev = vNext.prev;\n\t\t\tvNew.prev = vPrev;\n\t\t\tvPrev.next = vNew;\n\t\t\tvNew.next = vNext;\n\t\t\tvNext.prev = vNew;\n\n\t\t\tvNew.anEdge = eOrig;\n\t\t\t/* leave coords, s, t undefined */\n\n\t\t\t/* fix other edges on this vertex loop */\n\t\t\tvar e = eOrig;\n\t\t\tdo {\n\t\t\t\te.Org = vNew;\n\t\t\t\te = e.Onext;\n\t\t\t} while(e !== eOrig);\n\t\t},\n\n\t\t/* MakeFace( newFace, eOrig, fNext ) attaches a new face and makes it the left\n\t\t* face of all edges in the face loop to which eOrig belongs.  \"fNext\" gives\n\t\t* a place to insert the new face in the global face list.  We insert\n\t\t* the new face *before* fNext so that algorithms which walk the face\n\t\t* list will not see the newly created faces.\n\t\t*/\n\t\t// static void MakeFace( TESSface *newFace, TESShalfEdge *eOrig, TESSface *fNext )\n\t\tmakeFace_: function(newFace, eOrig, fNext) {\n\t\t\tvar fNew = newFace;\n\t\t\tassert(fNew !== null); \n\n\t\t\t/* insert in circular doubly-linked list before fNext */\n\t\t\tvar fPrev = fNext.prev;\n\t\t\tfNew.prev = fPrev;\n\t\t\tfPrev.next = fNew;\n\t\t\tfNew.next = fNext;\n\t\t\tfNext.prev = fNew;\n\n\t\t\tfNew.anEdge = eOrig;\n\t\t\tfNew.trail = null;\n\t\t\tfNew.marked = false;\n\n\t\t\t/* The new face is marked \"inside\" if the old one was.  This is a\n\t\t\t* convenience for the common case where a face has been split in two.\n\t\t\t*/\n\t\t\tfNew.inside = fNext.inside;\n\n\t\t\t/* fix other edges on this face loop */\n\t\t\tvar e = eOrig;\n\t\t\tdo {\n\t\t\t\te.Lface = fNew;\n\t\t\t\te = e.Lnext;\n\t\t\t} while(e !== eOrig);\n\t\t},\n\n\t\t/* KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),\n\t\t* and removes from the global edge list.\n\t\t*/\n\t\t//static void KillEdge( TESSmesh *mesh, TESShalfEdge *eDel )\n\t\tkillEdge_: function(eDel) {\n\t\t\t/* Half-edges are allocated in pairs, see EdgePair above */\n\t\t\tif( eDel.Sym.side < eDel.side ) { eDel = eDel.Sym; }\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tvar eNext = eDel.next;\n\t\t\tvar ePrev = eDel.Sym.next;\n\t\t\teNext.Sym.next = ePrev;\n\t\t\tePrev.Sym.next = eNext;\n\t\t},\n\n\n\t\t/* KillVertex( vDel ) destroys a vertex and removes it from the global\n\t\t* vertex list.  It updates the vertex loop to point to a given new vertex.\n\t\t*/\n\t\t//static void KillVertex( TESSmesh *mesh, TESSvertex *vDel, TESSvertex *newOrg )\n\t\tkillVertex_: function(vDel, newOrg) {\n\t\t\tvar eStart = vDel.anEdge;\n\t\t\t/* change the origin of all affected edges */\n\t\t\tvar e = eStart;\n\t\t\tdo {\n\t\t\t\te.Org = newOrg;\n\t\t\t\te = e.Onext;\n\t\t\t} while(e !== eStart);\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tvar vPrev = vDel.prev;\n\t\t\tvar vNext = vDel.next;\n\t\t\tvNext.prev = vPrev;\n\t\t\tvPrev.next = vNext;\n\t\t},\n\n\t\t/* KillFace( fDel ) destroys a face and removes it from the global face\n\t\t* list.  It updates the face loop to point to a given new face.\n\t\t*/\n\t\t//static void KillFace( TESSmesh *mesh, TESSface *fDel, TESSface *newLface )\n\t\tkillFace_: function(fDel, newLface) {\n\t\t\tvar eStart = fDel.anEdge;\n\n\t\t\t/* change the left face of all affected edges */\n\t\t\tvar e = eStart;\n\t\t\tdo {\n\t\t\t\te.Lface = newLface;\n\t\t\t\te = e.Lnext;\n\t\t\t} while(e !== eStart);\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tvar fPrev = fDel.prev;\n\t\t\tvar fNext = fDel.next;\n\t\t\tfNext.prev = fPrev;\n\t\t\tfPrev.next = fNext;\n\t\t},\n\n\t\t/****************** Basic Edge Operations **********************/\n\n\t\t/* tessMeshMakeEdge creates one edge, two vertices, and a loop (face).\n\t\t* The loop consists of the two new half-edges.\n\t\t*/\n\t\t//TESShalfEdge *tessMeshMakeEdge( TESSmesh *mesh )\n\t\tmakeEdge: function() {\n\t\t\tvar newVertex1 = new TESSvertex();\n\t\t\tvar newVertex2 = new TESSvertex();\n\t\t\tvar newFace = new TESSface();\n\t\t\tvar e = this.makeEdge_( this.eHead);\n\t\t\tthis.makeVertex_( newVertex1, e, this.vHead );\n\t\t\tthis.makeVertex_( newVertex2, e.Sym, this.vHead );\n\t\t\tthis.makeFace_( newFace, e, this.fHead );\n\t\t\treturn e;\n\t\t},\n\n\t\t/* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\n\t\t* mesh connectivity and topology.  It changes the mesh so that\n\t\t*\teOrg->Onext <- OLD( eDst->Onext )\n\t\t*\teDst->Onext <- OLD( eOrg->Onext )\n\t\t* where OLD(...) means the value before the meshSplice operation.\n\t\t*\n\t\t* This can have two effects on the vertex structure:\n\t\t*  - if eOrg->Org != eDst->Org, the two vertices are merged together\n\t\t*  - if eOrg->Org == eDst->Org, the origin is split into two vertices\n\t\t* In both cases, eDst->Org is changed and eOrg->Org is untouched.\n\t\t*\n\t\t* Similarly (and independently) for the face structure,\n\t\t*  - if eOrg->Lface == eDst->Lface, one loop is split into two\n\t\t*  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\n\t\t* In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\n\t\t*\n\t\t* Some special cases:\n\t\t* If eDst == eOrg, the operation has no effect.\n\t\t* If eDst == eOrg->Lnext, the new face will have a single edge.\n\t\t* If eDst == eOrg->Lprev, the old face will have a single edge.\n\t\t* If eDst == eOrg->Onext, the new vertex will have a single edge.\n\t\t* If eDst == eOrg->Oprev, the old vertex will have a single edge.\n\t\t*/\n\t\t//int tessMeshSplice( TESSmesh* mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst )\n\t\tsplice: function(eOrg, eDst) {\n\t\t\tvar joiningLoops = false;\n\t\t\tvar joiningVertices = false;\n\n\t\t\tif( eOrg === eDst ) return;\n\n\t\t\tif( eDst.Org !== eOrg.Org ) {\n\t\t\t\t/* We are merging two disjoint vertices -- destroy eDst->Org */\n\t\t\t\tjoiningVertices = true;\n\t\t\t\tthis.killVertex_( eDst.Org, eOrg.Org );\n\t\t\t}\n\t\t\tif( eDst.Lface !== eOrg.Lface ) {\n\t\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\n\t\t\t\tjoiningLoops = true;\n\t\t\t\tthis.killFace_( eDst.Lface, eOrg.Lface );\n\t\t\t}\n\n\t\t\t/* Change the edge structure */\n\t\t\tthis.splice_( eDst, eOrg );\n\n\t\t\tif( ! joiningVertices ) {\n\t\t\t\tvar newVertex = new TESSvertex();\n\n\t\t\t\t/* We split one vertex into two -- the new vertex is eDst->Org.\n\t\t\t\t* Make sure the old vertex points to a valid half-edge.\n\t\t\t\t*/\n\t\t\t\tthis.makeVertex_( newVertex, eDst, eOrg.Org );\n\t\t\t\teOrg.Org.anEdge = eOrg;\n\t\t\t}\n\t\t\tif( ! joiningLoops ) {\n\t\t\t\tvar newFace = new TESSface();  \n\n\t\t\t\t/* We split one loop into two -- the new loop is eDst->Lface.\n\t\t\t\t* Make sure the old face points to a valid half-edge.\n\t\t\t\t*/\n\t\t\t\tthis.makeFace_( newFace, eDst, eOrg.Lface );\n\t\t\t\teOrg.Lface.anEdge = eOrg;\n\t\t\t}\n\t\t},\n\n\t\t/* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\n\t\t* if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\n\t\t* eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\n\t\t* the newly created loop will contain eDel->Dst.  If the deletion of eDel\n\t\t* would create isolated vertices, those are deleted as well.\n\t\t*\n\t\t* This function could be implemented as two calls to tessMeshSplice\n\t\t* plus a few calls to memFree, but this would allocate and delete\n\t\t* unnecessary vertices and faces.\n\t\t*/\n\t\t//int tessMeshDelete( TESSmesh *mesh, TESShalfEdge *eDel )\n\t\tdelete: function(eDel) {\n\t\t\tvar eDelSym = eDel.Sym;\n\t\t\tvar joiningLoops = false;\n\n\t\t\t/* First step: disconnect the origin vertex eDel->Org.  We make all\n\t\t\t* changes to get a consistent mesh in this \"intermediate\" state.\n\t\t\t*/\n\t\t\tif( eDel.Lface !== eDel.Rface ) {\n\t\t\t\t/* We are joining two loops into one -- remove the left face */\n\t\t\t\tjoiningLoops = true;\n\t\t\t\tthis.killFace_( eDel.Lface, eDel.Rface );\n\t\t\t}\n\n\t\t\tif( eDel.Onext === eDel ) {\n\t\t\t\tthis.killVertex_( eDel.Org, null );\n\t\t\t} else {\n\t\t\t\t/* Make sure that eDel->Org and eDel->Rface point to valid half-edges */\n\t\t\t\teDel.Rface.anEdge = eDel.Oprev;\n\t\t\t\teDel.Org.anEdge = eDel.Onext;\n\n\t\t\t\tthis.splice_( eDel, eDel.Oprev );\n\t\t\t\tif( ! joiningLoops ) {\n\t\t\t\t\tvar newFace = new TESSface();\n\n\t\t\t\t\t/* We are splitting one loop into two -- create a new loop for eDel. */\n\t\t\t\t\tthis.makeFace_( newFace, eDel, eDel.Lface );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Claim: the mesh is now in a consistent state, except that eDel->Org\n\t\t\t* may have been deleted.  Now we disconnect eDel->Dst.\n\t\t\t*/\n\t\t\tif( eDelSym.Onext === eDelSym ) {\n\t\t\t\tthis.killVertex_( eDelSym.Org, null );\n\t\t\t\tthis.killFace_( eDelSym.Lface, null );\n\t\t\t} else {\n\t\t\t\t/* Make sure that eDel->Dst and eDel->Lface point to valid half-edges */\n\t\t\t\teDel.Lface.anEdge = eDelSym.Oprev;\n\t\t\t\teDelSym.Org.anEdge = eDelSym.Onext;\n\t\t\t\tthis.splice_( eDelSym, eDelSym.Oprev );\n\t\t\t}\n\n\t\t\t/* Any isolated vertices or faces have already been freed. */\n\t\t\tthis.killEdge_( eDel );\n\t\t},\n\n\t\t/******************** Other Edge Operations **********************/\n\n\t\t/* All these routines can be implemented with the basic edge\n\t\t* operations above.  They are provided for convenience and efficiency.\n\t\t*/\n\n\n\t\t/* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\n\t\t* eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\n\t\t* eOrg and eNew will have the same left face.\n\t\t*/\n\t\t// TESShalfEdge *tessMeshAddEdgeVertex( TESSmesh *mesh, TESShalfEdge *eOrg );\n\t\taddEdgeVertex: function(eOrg) {\n\t\t\tvar eNew = this.makeEdge_( eOrg );\n\t\t\tvar eNewSym = eNew.Sym;\n\n\t\t\t/* Connect the new edge appropriately */\n\t\t\tthis.splice_( eNew, eOrg.Lnext );\n\n\t\t\t/* Set the vertex and face information */\n\t\t\teNew.Org = eOrg.Dst;\n\n\t\t\tvar newVertex = new TESSvertex();\n\t\t\tthis.makeVertex_( newVertex, eNewSym, eNew.Org );\n\n\t\t\teNew.Lface = eNewSym.Lface = eOrg.Lface;\n\n\t\t\treturn eNew;\n\t\t},\n\n\n\t\t/* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\n\t\t* such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\n\t\t* eOrg and eNew will have the same left face.\n\t\t*/\n\t\t// TESShalfEdge *tessMeshSplitEdge( TESSmesh *mesh, TESShalfEdge *eOrg );\n\t\tsplitEdge: function(eOrg, eDst) {\n\t\t\tvar tempHalfEdge = this.addEdgeVertex( eOrg );\n\t\t\tvar eNew = tempHalfEdge.Sym;\n\n\t\t\t/* Disconnect eOrg from eOrg->Dst and connect it to eNew->Org */\n\t\t\tthis.splice_( eOrg.Sym, eOrg.Sym.Oprev );\n\t\t\tthis.splice_( eOrg.Sym, eNew );\n\n\t\t\t/* Set the vertex and face information */\n\t\t\teOrg.Dst = eNew.Org;\n\t\t\teNew.Dst.anEdge = eNew.Sym;\t/* may have pointed to eOrg->Sym */\n\t\t\teNew.Rface = eOrg.Rface;\n\t\t\teNew.winding = eOrg.winding;\t/* copy old winding information */\n\t\t\teNew.Sym.winding = eOrg.Sym.winding;\n\n\t\t\treturn eNew;\n\t\t},\n\n\n\t\t/* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\n\t\t* to eDst->Org, and returns the corresponding half-edge eNew.\n\t\t* If eOrg->Lface == eDst->Lface, this splits one loop into two,\n\t\t* and the newly created loop is eNew->Lface.  Otherwise, two disjoint\n\t\t* loops are merged into one, and the loop eDst->Lface is destroyed.\n\t\t*\n\t\t* If (eOrg == eDst), the new face will have only two edges.\n\t\t* If (eOrg->Lnext == eDst), the old face is reduced to a single edge.\n\t\t* If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.\n\t\t*/\n\n\t\t// TESShalfEdge *tessMeshConnect( TESSmesh *mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst );\n\t\tconnect: function(eOrg, eDst) {\n\t\t\tvar joiningLoops = false;  \n\t\t\tvar eNew = this.makeEdge_( eOrg );\n\t\t\tvar eNewSym = eNew.Sym;\n\n\t\t\tif( eDst.Lface !== eOrg.Lface ) {\n\t\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\n\t\t\t\tjoiningLoops = true;\n\t\t\t\tthis.killFace_( eDst.Lface, eOrg.Lface );\n\t\t\t}\n\n\t\t\t/* Connect the new edge appropriately */\n\t\t\tthis.splice_( eNew, eOrg.Lnext );\n\t\t\tthis.splice_( eNewSym, eDst );\n\n\t\t\t/* Set the vertex and face information */\n\t\t\teNew.Org = eOrg.Dst;\n\t\t\teNewSym.Org = eDst.Org;\n\t\t\teNew.Lface = eNewSym.Lface = eOrg.Lface;\n\n\t\t\t/* Make sure the old face points to a valid half-edge */\n\t\t\teOrg.Lface.anEdge = eNewSym;\n\n\t\t\tif( ! joiningLoops ) {\n\t\t\t\tvar newFace = new TESSface();\n\t\t\t\t/* We split one loop into two -- the new loop is eNew->Lface */\n\t\t\t\tthis.makeFace_( newFace, eNew, eOrg.Lface );\n\t\t\t}\n\t\t\treturn eNew;\n\t\t},\n\n\t\t/* tessMeshZapFace( fZap ) destroys a face and removes it from the\n\t\t* global face list.  All edges of fZap will have a NULL pointer as their\n\t\t* left face.  Any edges which also have a NULL pointer as their right face\n\t\t* are deleted entirely (along with any isolated vertices this produces).\n\t\t* An entire mesh can be deleted by zapping its faces, one at a time,\n\t\t* in any order.  Zapped faces cannot be used in further mesh operations!\n\t\t*/\n\t\tzapFace: function( fZap )\n\t\t{\n\t\t\tvar eStart = fZap.anEdge;\n\t\t\tvar e, eNext, eSym;\n\t\t\tvar fPrev, fNext;\n\n\t\t\t/* walk around face, deleting edges whose right face is also NULL */\n\t\t\teNext = eStart.Lnext;\n\t\t\tdo {\n\t\t\t\te = eNext;\n\t\t\t\teNext = e.Lnext;\n\n\t\t\t\te.Lface = null;\n\t\t\t\tif( e.Rface === null ) {\n\t\t\t\t\t/* delete the edge -- see TESSmeshDelete above */\n\n\t\t\t\t\tif( e.Onext === e ) {\n\t\t\t\t\t\tthis.killVertex_( e.Org, null );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* Make sure that e->Org points to a valid half-edge */\n\t\t\t\t\t\te.Org.anEdge = e.Onext;\n\t\t\t\t\t\tthis.splice_( e, e.Oprev );\n\t\t\t\t\t}\n\t\t\t\t\teSym = e.Sym;\n\t\t\t\t\tif( eSym.Onext === eSym ) {\n\t\t\t\t\t\tthis.killVertex_( eSym.Org, null );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* Make sure that eSym->Org points to a valid half-edge */\n\t\t\t\t\t\teSym.Org.anEdge = eSym.Onext;\n\t\t\t\t\t\tthis.splice_( eSym, eSym.Oprev );\n\t\t\t\t\t}\n\t\t\t\t\tthis.killEdge_( e );\n\t\t\t\t}\n\t\t\t} while( e != eStart );\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tfPrev = fZap.prev;\n\t\t\tfNext = fZap.next;\n\t\t\tfNext.prev = fPrev;\n\t\t\tfPrev.next = fNext;\n\t\t},\n\n\t\tcountFaceVerts_: function(f) {\n\t\t\tvar eCur = f.anEdge;\n\t\t\tvar n = 0;\n\t\t\tdo\n\t\t\t{\n\t\t\t\tn++;\n\t\t\t\teCur = eCur.Lnext;\n\t\t\t}\n\t\t\twhile (eCur !== f.anEdge);\n\t\t\treturn n;\n\t\t},\n\n\t\t//int tessMeshMergeConvexFaces( TESSmesh *mesh, int maxVertsPerFace )\n\t\tmergeConvexFaces: function(maxVertsPerFace) {\n\t\t\tvar f;\n\t\t\tvar eCur, eNext, eSym;\n\t\t\tvar vStart;\n\t\t\tvar curNv, symNv;\n\n\t\t\tfor( f = this.fHead.next; f !== this.fHead; f = f.next )\n\t\t\t{\n\t\t\t\t// Skip faces which are outside the result.\n\t\t\t\tif( !f.inside )\n\t\t\t\t\tcontinue;\n\n\t\t\t\teCur = f.anEdge;\n\t\t\t\tvStart = eCur.Org;\n\t\t\t\t\t\n\t\t\t\twhile (true)\n\t\t\t\t{\n\t\t\t\t\teNext = eCur.Lnext;\n\t\t\t\t\teSym = eCur.Sym;\n\n\t\t\t\t\t// Try to merge if the neighbour face is valid.\n\t\t\t\t\tif( eSym && eSym.Lface && eSym.Lface.inside )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Try to merge the neighbour faces if the resulting polygons\n\t\t\t\t\t\t// does not exceed maximum number of vertices.\n\t\t\t\t\t\tcurNv = this.countFaceVerts_( f );\n\t\t\t\t\t\tsymNv = this.countFaceVerts_( eSym.Lface );\n\t\t\t\t\t\tif( (curNv+symNv-2) <= maxVertsPerFace )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Merge if the resulting poly is convex.\n\t\t\t\t\t\t\tif( Geom.vertCCW( eCur.Lprev.Org, eCur.Org, eSym.Lnext.Lnext.Org ) &&\n\t\t\t\t\t\t\t\tGeom.vertCCW( eSym.Lprev.Org, eSym.Org, eCur.Lnext.Lnext.Org ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\teNext = eSym.Lnext;\n\t\t\t\t\t\t\t\tthis.delete( eSym );\n\t\t\t\t\t\t\t\teCur = null;\n\t\t\t\t\t\t\t\teSym = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif( eCur && eCur.Lnext.Org === vStart )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t// Continue to next edge.\n\t\t\t\t\teCur = eNext;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t},\n\n\t\t/* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\n\t\t*/\n\t\tcheck: function() {\n\t\t\tvar fHead = this.fHead;\n\t\t\tvar vHead = this.vHead;\n\t\t\tvar eHead = this.eHead;\n\t\t\tvar f, fPrev, v, vPrev, e, ePrev;\n\n\t\t\tfPrev = fHead;\n\t\t\tfor( fPrev = fHead ; (f = fPrev.next) !== fHead; fPrev = f) {\n\t\t\t\tassert( f.prev === fPrev );\n\t\t\t\te = f.anEdge;\n\t\t\t\tdo {\n\t\t\t\t\tassert( e.Sym !== e );\n\t\t\t\t\tassert( e.Sym.Sym === e );\n\t\t\t\t\tassert( e.Lnext.Onext.Sym === e );\n\t\t\t\t\tassert( e.Onext.Sym.Lnext === e );\n\t\t\t\t\tassert( e.Lface === f );\n\t\t\t\t\te = e.Lnext;\n\t\t\t\t} while( e !== f.anEdge );\n\t\t\t}\n\t\t\tassert( f.prev === fPrev && f.anEdge === null );\n\n\t\t\tvPrev = vHead;\n\t\t\tfor( vPrev = vHead ; (v = vPrev.next) !== vHead; vPrev = v) {\n\t\t\t\tassert( v.prev === vPrev );\n\t\t\t\te = v.anEdge;\n\t\t\t\tdo {\n\t\t\t\t\tassert( e.Sym !== e );\n\t\t\t\t\tassert( e.Sym.Sym === e );\n\t\t\t\t\tassert( e.Lnext.Onext.Sym === e );\n\t\t\t\t\tassert( e.Onext.Sym.Lnext === e );\n\t\t\t\t\tassert( e.Org === v );\n\t\t\t\t\te = e.Onext;\n\t\t\t\t} while( e !== v.anEdge );\n\t\t\t}\n\t\t\tassert( v.prev === vPrev && v.anEdge === null );\n\n\t\t\tePrev = eHead;\n\t\t\tfor( ePrev = eHead ; (e = ePrev.next) !== eHead; ePrev = e) {\n\t\t\t\tassert( e.Sym.next === ePrev.Sym );\n\t\t\t\tassert( e.Sym !== e );\n\t\t\t\tassert( e.Sym.Sym === e );\n\t\t\t\tassert( e.Org !== null );\n\t\t\t\tassert( e.Dst !== null );\n\t\t\t\tassert( e.Lnext.Onext.Sym === e );\n\t\t\t\tassert( e.Onext.Sym.Lnext === e );\n\t\t\t}\n\t\t\tassert( e.Sym.next === ePrev.Sym\n\t\t\t\t&& e.Sym === this.eHeadSym\n\t\t\t\t&& e.Sym.Sym === e\n\t\t\t\t&& e.Org === null && e.Dst === null\n\t\t\t\t&& e.Lface === null && e.Rface === null );\n\t\t}\n\n\t};\n\n\tvar Geom = {};\n\n\tGeom.vertEq = function(u,v) {\n\t\treturn (u.s === v.s && u.t === v.t);\n\t};\n\n\t/* Returns TRUE if u is lexicographically <= v. */\n\tGeom.vertLeq = function(u,v) {\n\t\treturn ((u.s < v.s) || (u.s === v.s && u.t <= v.t));\n\t};\n\n\t/* Versions of VertLeq, EdgeSign, EdgeEval with s and t transposed. */\n\tGeom.transLeq = function(u,v) {\n\t\treturn ((u.t < v.t) || (u.t === v.t && u.s <= v.s));\n\t};\n\n\tGeom.edgeGoesLeft = function(e) {\n\t\treturn Geom.vertLeq( e.Dst, e.Org );\n\t};\n\n\tGeom.edgeGoesRight = function(e) {\n\t\treturn Geom.vertLeq( e.Org, e.Dst );\n\t};\n\n\tGeom.vertL1dist = function(u,v) {\n\t\treturn (Math.abs(u.s - v.s) + Math.abs(u.t - v.t));\n\t};\n\n\t//TESSreal tesedgeEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.edgeEval = function( u, v, w ) {\n\t\t/* Given three vertices u,v,w such that VertLeq(u,v) && VertLeq(v,w),\n\t\t* evaluates the t-coord of the edge uw at the s-coord of the vertex v.\n\t\t* Returns v->t - (uw)(v->s), ie. the signed distance from uw to v.\n\t\t* If uw is vertical (and thus passes thru v), the result is zero.\n\t\t*\n\t\t* The calculation is extremely accurate and stable, even when v\n\t\t* is very close to u or w.  In particular if we set v->t = 0 and\n\t\t* let r be the negated result (this evaluates (uw)(v->s)), then\n\t\t* r is guaranteed to satisfy MIN(u->t,w->t) <= r <= MAX(u->t,w->t).\n\t\t*/\n\t\tassert( Geom.vertLeq( u, v ) && Geom.vertLeq( v, w ));\n\n\t\tvar gapL = v.s - u.s;\n\t\tvar gapR = w.s - v.s;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\tif( gapL < gapR ) {\n\t\t\t\treturn (v.t - u.t) + (u.t - w.t) * (gapL / (gapL + gapR));\n\t\t\t} else {\n\t\t\t\treturn (v.t - w.t) + (w.t - u.t) * (gapR / (gapL + gapR));\n\t\t\t}\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\t//TESSreal tesedgeSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.edgeSign = function( u, v, w ) {\n\t\t/* Returns a number whose sign matches EdgeEval(u,v,w) but which\n\t\t* is cheaper to evaluate.  Returns > 0, == 0 , or < 0\n\t\t* as v is above, on, or below the edge uw.\n\t\t*/\n\t\tassert( Geom.vertLeq( u, v ) && Geom.vertLeq( v, w ));\n\n\t\tvar gapL = v.s - u.s;\n\t\tvar gapR = w.s - v.s;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\treturn (v.t - w.t) * gapL + (v.t - u.t) * gapR;\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\n\t/***********************************************************************\n\t* Define versions of EdgeSign, EdgeEval with s and t transposed.\n\t*/\n\n\t//TESSreal testransEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.transEval = function( u, v, w ) {\n\t\t/* Given three vertices u,v,w such that TransLeq(u,v) && TransLeq(v,w),\n\t\t* evaluates the t-coord of the edge uw at the s-coord of the vertex v.\n\t\t* Returns v->s - (uw)(v->t), ie. the signed distance from uw to v.\n\t\t* If uw is vertical (and thus passes thru v), the result is zero.\n\t\t*\n\t\t* The calculation is extremely accurate and stable, even when v\n\t\t* is very close to u or w.  In particular if we set v->s = 0 and\n\t\t* let r be the negated result (this evaluates (uw)(v->t)), then\n\t\t* r is guaranteed to satisfy MIN(u->s,w->s) <= r <= MAX(u->s,w->s).\n\t\t*/\n\t\tassert( Geom.transLeq( u, v ) && Geom.transLeq( v, w ));\n\n\t\tvar gapL = v.t - u.t;\n\t\tvar gapR = w.t - v.t;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\tif( gapL < gapR ) {\n\t\t\t\treturn (v.s - u.s) + (u.s - w.s) * (gapL / (gapL + gapR));\n\t\t\t} else {\n\t\t\t\treturn (v.s - w.s) + (w.s - u.s) * (gapR / (gapL + gapR));\n\t\t\t}\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\t//TESSreal testransSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.transSign = function( u, v, w ) {\n\t\t/* Returns a number whose sign matches TransEval(u,v,w) but which\n\t\t* is cheaper to evaluate.  Returns > 0, == 0 , or < 0\n\t\t* as v is above, on, or below the edge uw.\n\t\t*/\n\t\tassert( Geom.transLeq( u, v ) && Geom.transLeq( v, w ));\n\n\t\tvar gapL = v.t - u.t;\n\t\tvar gapR = w.t - v.t;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\treturn (v.s - w.s) * gapL + (v.s - u.s) * gapR;\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\n\t//int tesvertCCW( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.vertCCW = function( u, v, w ) {\n\t\t/* For almost-degenerate situations, the results are not reliable.\n\t\t* Unless the floating-point arithmetic can be performed without\n\t\t* rounding errors, *any* implementation will give incorrect results\n\t\t* on some degenerate inputs, so the client must have some way to\n\t\t* handle this situation.\n\t\t*/\n\t\treturn (u.s*(v.t - w.t) + v.s*(w.t - u.t) + w.s*(u.t - v.t)) >= 0.0;\n\t};\n\n\t/* Given parameters a,x,b,y returns the value (b*x+a*y)/(a+b),\n\t* or (x+y)/2 if a==b==0.  It requires that a,b >= 0, and enforces\n\t* this in the rare case that one argument is slightly negative.\n\t* The implementation is extremely stable numerically.\n\t* In particular it guarantees that the result r satisfies\n\t* MIN(x,y) <= r <= MAX(x,y), and the results are very accurate\n\t* even when a and b differ greatly in magnitude.\n\t*/\n\tGeom.interpolate = function(a,x,b,y) {\n\t\treturn (a = (a < 0) ? 0 : a, b = (b < 0) ? 0 : b, ((a <= b) ? ((b == 0) ? ((x+y) / 2) : (x + (y-x) * (a/(a+b)))) : (y + (x-y) * (b/(a+b)))));\n\t};\n\n\t/*\n\t#ifndef FOR_TRITE_TEST_PROGRAM\n\t#define Interpolate(a,x,b,y)\tRealInterpolate(a,x,b,y)\n\t#else\n\n\t// Claim: the ONLY property the sweep algorithm relies on is that\n\t// MIN(x,y) <= r <= MAX(x,y).  This is a nasty way to test that.\n\t#include <stdlib.h>\n\textern int RandomInterpolate;\n\n\tdouble Interpolate( double a, double x, double b, double y)\n\t{\n\t\tprintf(\"*********************%d\\n\",RandomInterpolate);\n\t\tif( RandomInterpolate ) {\n\t\t\ta = 1.2 * drand48() - 0.1;\n\t\t\ta = (a < 0) ? 0 : ((a > 1) ? 1 : a);\n\t\t\tb = 1.0 - a;\n\t\t}\n\t\treturn RealInterpolate(a,x,b,y);\n\t}\n\t#endif*/\n\n\tGeom.intersect = function( o1, d1, o2, d2, v ) {\n\t\t/* Given edges (o1,d1) and (o2,d2), compute their point of intersection.\n\t\t* The computed point is guaranteed to lie in the intersection of the\n\t\t* bounding rectangles defined by each edge.\n\t\t*/\n\t\tvar z1, z2;\n\t\tvar t;\n\n\t\t/* This is certainly not the most efficient way to find the intersection\n\t\t* of two line segments, but it is very numerically stable.\n\t\t*\n\t\t* Strategy: find the two middle vertices in the VertLeq ordering,\n\t\t* and interpolate the intersection s-value from these.  Then repeat\n\t\t* using the TransLeq ordering to find the intersection t-value.\n\t\t*/\n\n\t\tif( ! Geom.vertLeq( o1, d1 )) { t = o1; o1 = d1; d1 = t; } //swap( o1, d1 ); }\n\t\tif( ! Geom.vertLeq( o2, d2 )) { t = o2; o2 = d2; d2 = t; } //swap( o2, d2 ); }\n\t\tif( ! Geom.vertLeq( o1, o2 )) { t = o1; o1 = o2; o2 = t; t = d1; d1 = d2; d2 = t; }//swap( o1, o2 ); swap( d1, d2 ); }\n\n\t\tif( ! Geom.vertLeq( o2, d1 )) {\n\t\t\t/* Technically, no intersection -- do our best */\n\t\t\tv.s = (o2.s + d1.s) / 2;\n\t\t} else if( Geom.vertLeq( d1, d2 )) {\n\t\t\t/* Interpolate between o2 and d1 */\n\t\t\tz1 = Geom.edgeEval( o1, o2, d1 );\n\t\t\tz2 = Geom.edgeEval( o2, d1, d2 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.s = Geom.interpolate( z1, o2.s, z2, d1.s );\n\t\t} else {\n\t\t\t/* Interpolate between o2 and d2 */\n\t\t\tz1 = Geom.edgeSign( o1, o2, d1 );\n\t\t\tz2 = -Geom.edgeSign( o1, d2, d1 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.s = Geom.interpolate( z1, o2.s, z2, d2.s );\n\t\t}\n\n\t\t/* Now repeat the process for t */\n\n\t\tif( ! Geom.transLeq( o1, d1 )) { t = o1; o1 = d1; d1 = t; } //swap( o1, d1 ); }\n\t\tif( ! Geom.transLeq( o2, d2 )) { t = o2; o2 = d2; d2 = t; } //swap( o2, d2 ); }\n\t\tif( ! Geom.transLeq( o1, o2 )) { t = o1; o1 = o2; o2 = t; t = d1; d1 = d2; d2 = t; } //swap( o1, o2 ); swap( d1, d2 ); }\n\n\t\tif( ! Geom.transLeq( o2, d1 )) {\n\t\t\t/* Technically, no intersection -- do our best */\n\t\t\tv.t = (o2.t + d1.t) / 2;\n\t\t} else if( Geom.transLeq( d1, d2 )) {\n\t\t\t/* Interpolate between o2 and d1 */\n\t\t\tz1 = Geom.transEval( o1, o2, d1 );\n\t\t\tz2 = Geom.transEval( o2, d1, d2 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.t = Geom.interpolate( z1, o2.t, z2, d1.t );\n\t\t} else {\n\t\t\t/* Interpolate between o2 and d2 */\n\t\t\tz1 = Geom.transSign( o1, o2, d1 );\n\t\t\tz2 = -Geom.transSign( o1, d2, d1 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.t = Geom.interpolate( z1, o2.t, z2, d2.t );\n\t\t}\n\t};\n\n\n\n\tfunction DictNode() {\n\t\tthis.key = null;\n\t\tthis.next = null;\n\t\tthis.prev = null;\n\t};\n\n\tfunction Dict(frame, leq) {\n\t\tthis.head = new DictNode();\n\t\tthis.head.next = this.head;\n\t\tthis.head.prev = this.head;\n\t\tthis.frame = frame;\n\t\tthis.leq = leq;\n\t};\n\n\tDict.prototype = {\n\t\tmin: function() {\n\t\t\treturn this.head.next;\n\t\t},\n\n\t\tmax: function() {\n\t\t\treturn this.head.prev;\n\t\t},\n\n\t\tinsert: function(k) {\n\t\t\treturn this.insertBefore(this.head, k);\n\t\t},\n\n\t\tsearch: function(key) {\n\t\t\t/* Search returns the node with the smallest key greater than or equal\n\t\t\t* to the given key.  If there is no such key, returns a node whose\n\t\t\t* key is NULL.  Similarly, Succ(Max(d)) has a NULL key, etc.\n\t\t\t*/\n\t\t\tvar node = this.head;\n\t\t\tdo {\n\t\t\t\tnode = node.next;\n\t\t\t} while( node.key !== null && ! this.leq(this.frame, key, node.key));\n\n\t\t\treturn node;\n\t\t},\n\n\t\tinsertBefore: function(node, key) {\n\t\t\tdo {\n\t\t\t\tnode = node.prev;\n\t\t\t} while( node.key !== null && ! this.leq(this.frame, node.key, key));\n\n\t\t\tvar newNode = new DictNode();\n\t\t\tnewNode.key = key;\n\t\t\tnewNode.next = node.next;\n\t\t\tnode.next.prev = newNode;\n\t\t\tnewNode.prev = node;\n\t\t\tnode.next = newNode;\n\n\t\t\treturn newNode;\n\t\t},\n\n\t\tdelete: function(node) {\n\t\t\tnode.next.prev = node.prev;\n\t\t\tnode.prev.next = node.next;\n\t\t}\n\t};\n\n\n\tfunction PQnode() {\n\t\tthis.handle = null;\n\t}\n\n\tfunction PQhandleElem() {\n\t\tthis.key = null;\n\t\tthis.node = null;\n\t}\n\n\tfunction PriorityQ(size, leq) {\n\t\tthis.size = 0;\n\t\tthis.max = size;\n\n\t\tthis.nodes = [];\n\t\tthis.nodes.length = size+1;\n\t\tfor (var i = 0; i < this.nodes.length; i++)\n\t\t\tthis.nodes[i] = new PQnode();\n\n\t\tthis.handles = [];\n\t\tthis.handles.length = size+1;\n\t\tfor (var i = 0; i < this.handles.length; i++)\n\t\t\tthis.handles[i] = new PQhandleElem();\n\n\t\tthis.initialized = false;\n\t\tthis.freeList = 0;\n\t\tthis.leq = leq;\n\n\t\tthis.nodes[1].handle = 1;\t/* so that Minimum() returns NULL */\n\t\tthis.handles[1].key = null;\n\t};\n\n\tPriorityQ.prototype = {\n\n\t\tfloatDown_: function( curr )\n\t\t{\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar hCurr, hChild;\n\t\t\tvar child;\n\n\t\t\thCurr = n[curr].handle;\n\t\t\tfor( ;; ) {\n\t\t\t\tchild = curr << 1;\n\t\t\t\tif( child < this.size && this.leq( h[n[child+1].handle].key, h[n[child].handle].key )) {\n\t\t\t\t\t++child;\n\t\t\t\t}\n\n\t\t\t\tassert(child <= this.max);\n\n\t\t\t\thChild = n[child].handle;\n\t\t\t\tif( child > this.size || this.leq( h[hCurr].key, h[hChild].key )) {\n\t\t\t\t\tn[curr].handle = hCurr;\n\t\t\t\t\th[hCurr].node = curr;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tn[curr].handle = hChild;\n\t\t\t\th[hChild].node = curr;\n\t\t\t\tcurr = child;\n\t\t\t}\n\t\t},\n\n\t\tfloatUp_: function( curr )\n\t\t{\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar hCurr, hParent;\n\t\t\tvar parent;\n\n\t\t\thCurr = n[curr].handle;\n\t\t\tfor( ;; ) {\n\t\t\t\tparent = curr >> 1;\n\t\t\t\thParent = n[parent].handle;\n\t\t\t\tif( parent == 0 || this.leq( h[hParent].key, h[hCurr].key )) {\n\t\t\t\t\tn[curr].handle = hCurr;\n\t\t\t\t\th[hCurr].node = curr;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tn[curr].handle = hParent;\n\t\t\t\th[hParent].node = curr;\n\t\t\t\tcurr = parent;\n\t\t\t}\n\t\t},\n\n\t\tinit: function() {\n\t\t\t/* This method of building a heap is O(n), rather than O(n lg n). */\n\t\t\tfor( var i = this.size; i >= 1; --i ) {\n\t\t\t\tthis.floatDown_( i );\n\t\t\t}\n\t\t\tthis.initialized = true;\n\t\t},\n\n\t\tmin: function() {\n\t\t\treturn this.handles[this.nodes[1].handle].key;\n\t\t},\n\n\t\tisEmpty: function() {\n\t\t\tthis.size === 0;\n\t\t},\n\n\t\t/* really pqHeapInsert */\n\t\t/* returns INV_HANDLE iff out of memory */\n\t\t//PQhandle pqHeapInsert( TESSalloc* alloc, PriorityQHeap *pq, PQkey keyNew )\n\t\tinsert: function(keyNew)\n\t\t{\n\t\t\tvar curr;\n\t\t\tvar free;\n\n\t\t\tcurr = ++this.size;\n\t\t\tif( (curr*2) > this.max ) {\n\t\t\t\tthis.max *= 2;\n\t\t\t\tvar s;\n\t\t\t\ts = this.nodes.length;\n\t\t\t\tthis.nodes.length = this.max+1;\n\t\t\t\tfor (var i = s; i < this.nodes.length; i++)\n\t\t\t\t\tthis.nodes[i] = new PQnode();\n\n\t\t\t\ts = this.handles.length;\n\t\t\t\tthis.handles.length = this.max+1;\n\t\t\t\tfor (var i = s; i < this.handles.length; i++)\n\t\t\t\t\tthis.handles[i] = new PQhandleElem();\n\t\t\t}\n\n\t\t\tif( this.freeList === 0 ) {\n\t\t\t\tfree = curr;\n\t\t\t} else {\n\t\t\t\tfree = this.freeList;\n\t\t\t\tthis.freeList = this.handles[free].node;\n\t\t\t}\n\n\t\t\tthis.nodes[curr].handle = free;\n\t\t\tthis.handles[free].node = curr;\n\t\t\tthis.handles[free].key = keyNew;\n\n\t\t\tif( this.initialized ) {\n\t\t\t\tthis.floatUp_( curr );\n\t\t\t}\n\t\t\treturn free;\n\t\t},\n\n\t\t//PQkey pqHeapExtractMin( PriorityQHeap *pq )\n\t\textractMin: function() {\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar hMin = n[1].handle;\n\t\t\tvar min = h[hMin].key;\n\n\t\t\tif( this.size > 0 ) {\n\t\t\t\tn[1].handle = n[this.size].handle;\n\t\t\t\th[n[1].handle].node = 1;\n\n\t\t\t\th[hMin].key = null;\n\t\t\t\th[hMin].node = this.freeList;\n\t\t\t\tthis.freeList = hMin;\n\n\t\t\t\t--this.size;\n\t\t\t\tif( this.size > 0 ) {\n\t\t\t\t\tthis.floatDown_( 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn min;\n\t\t},\n\n\t\tdelete: function( hCurr ) {\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar curr;\n\n\t\t\tassert( hCurr >= 1 && hCurr <= this.max && h[hCurr].key !== null );\n\n\t\t\tcurr = h[hCurr].node;\n\t\t\tn[curr].handle = n[this.size].handle;\n\t\t\th[n[curr].handle].node = curr;\n\n\t\t\t--this.size;\n\t\t\tif( curr <= this.size ) {\n\t\t\t\tif( curr <= 1 || this.leq( h[n[curr>>1].handle].key, h[n[curr].handle].key )) {\n\t\t\t\t\tthis.floatDown_( curr );\n\t\t\t\t} else {\n\t\t\t\t\tthis.floatUp_( curr );\n\t\t\t\t}\n\t\t\t}\n\t\t\th[hCurr].key = null;\n\t\t\th[hCurr].node = this.freeList;\n\t\t\tthis.freeList = hCurr;\n\t\t}\n\t};\n\n\n\t/* For each pair of adjacent edges crossing the sweep line, there is\n\t* an ActiveRegion to represent the region between them.  The active\n\t* regions are kept in sorted order in a dynamic dictionary.  As the\n\t* sweep line crosses each vertex, we update the affected regions.\n\t*/\n\n\tfunction ActiveRegion() {\n\t\tthis.eUp = null;\t\t/* upper edge, directed right to left */\n\t\tthis.nodeUp = null;\t/* dictionary node corresponding to eUp */\n\t\tthis.windingNumber = 0;\t/* used to determine which regions are\n\t\t\t\t\t\t\t\t* inside the polygon */\n\t\tthis.inside = false;\t\t/* is this region inside the polygon? */\n\t\tthis.sentinel = false;\t/* marks fake edges at t = +/-infinity */\n\t\tthis.dirty = false;\t\t/* marks regions where the upper or lower\n\t\t\t\t\t\t* edge has changed, but we haven't checked\n\t\t\t\t\t\t* whether they intersect yet */\n\t\tthis.fixUpperEdge = false;\t/* marks temporary edges introduced when\n\t\t\t\t\t\t\t* we process a \"right vertex\" (one without\n\t\t\t\t\t\t\t* any edges leaving to the right) */\n\t};\n\n\tvar Sweep = {};\n\n\tSweep.regionBelow = function(r) {\n\t\treturn r.nodeUp.prev.key;\n\t}\n\n\tSweep.regionAbove = function(r) {\n\t\treturn r.nodeUp.next.key;\n\t}\n\n\tSweep.debugEvent = function( tess ) {\n\t\t// empty\n\t}\n\n\n\t/*\n\t* Invariants for the Edge Dictionary.\n\t* - each pair of adjacent edges e2=Succ(e1) satisfies EdgeLeq(e1,e2)\n\t*   at any valid location of the sweep event\n\t* - if EdgeLeq(e2,e1) as well (at any valid sweep event), then e1 and e2\n\t*   share a common endpoint\n\t* - for each e, e->Dst has been processed, but not e->Org\n\t* - each edge e satisfies VertLeq(e->Dst,event) && VertLeq(event,e->Org)\n\t*   where \"event\" is the current sweep line event.\n\t* - no edge e has zero length\n\t*\n\t* Invariants for the Mesh (the processed portion).\n\t* - the portion of the mesh left of the sweep line is a planar graph,\n\t*   ie. there is *some* way to embed it in the plane\n\t* - no processed edge has zero length\n\t* - no two processed vertices have identical coordinates\n\t* - each \"inside\" region is monotone, ie. can be broken into two chains\n\t*   of monotonically increasing vertices according to VertLeq(v1,v2)\n\t*   - a non-invariant: these chains may intersect (very slightly)\n\t*\n\t* Invariants for the Sweep.\n\t* - if none of the edges incident to the event vertex have an activeRegion\n\t*   (ie. none of these edges are in the edge dictionary), then the vertex\n\t*   has only right-going edges.\n\t* - if an edge is marked \"fixUpperEdge\" (it is a temporary edge introduced\n\t*   by ConnectRightVertex), then it is the only right-going edge from\n\t*   its associated vertex.  (This says that these edges exist only\n\t*   when it is necessary.)\n\t*/\n\n\t/* When we merge two edges into one, we need to compute the combined\n\t* winding of the new edge.\n\t*/\n\tSweep.addWinding = function(eDst,eSrc) {\n\t\teDst.winding += eSrc.winding;\n\t\teDst.Sym.winding += eSrc.Sym.winding;\n\t}\n\n\n\t//static int EdgeLeq( TESStesselator *tess, ActiveRegion *reg1, ActiveRegion *reg2 )\n\tSweep.edgeLeq = function( tess, reg1, reg2 ) {\n\t\t/*\n\t\t* Both edges must be directed from right to left (this is the canonical\n\t\t* direction for the upper edge of each region).\n\t\t*\n\t\t* The strategy is to evaluate a \"t\" value for each edge at the\n\t\t* current sweep line position, given by tess->event.  The calculations\n\t\t* are designed to be very stable, but of course they are not perfect.\n\t\t*\n\t\t* Special case: if both edge destinations are at the sweep event,\n\t\t* we sort the edges by slope (they would otherwise compare equally).\n\t\t*/\n\t\tvar ev = tess.event;\n\t\tvar t1, t2;\n\n\t\tvar e1 = reg1.eUp;\n\t\tvar e2 = reg2.eUp;\n\n\t\tif( e1.Dst === ev ) {\n\t\t\tif( e2.Dst === ev ) {\n\t\t\t\t/* Two edges right of the sweep line which meet at the sweep event.\n\t\t\t\t* Sort them by slope.\n\t\t\t\t*/\n\t\t\t\tif( Geom.vertLeq( e1.Org, e2.Org )) {\n\t\t\t\t\treturn Geom.edgeSign( e2.Dst, e1.Org, e2.Org ) <= 0;\n\t\t\t\t}\n\t\t\t\treturn Geom.edgeSign( e1.Dst, e2.Org, e1.Org ) >= 0;\n\t\t\t}\n\t\t\treturn Geom.edgeSign( e2.Dst, ev, e2.Org ) <= 0;\n\t\t}\n\t\tif( e2.Dst === ev ) {\n\t\t\treturn Geom.edgeSign( e1.Dst, ev, e1.Org ) >= 0;\n\t\t}\n\n\t\t/* General case - compute signed distance *from* e1, e2 to event */\n\t\tvar t1 = Geom.edgeEval( e1.Dst, ev, e1.Org );\n\t\tvar t2 = Geom.edgeEval( e2.Dst, ev, e2.Org );\n\t\treturn (t1 >= t2);\n\t}\n\n\n\t//static void DeleteRegion( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.deleteRegion = function( tess, reg ) {\n\t\tif( reg.fixUpperEdge ) {\n\t\t\t/* It was created with zero winding number, so it better be\n\t\t\t* deleted with zero winding number (ie. it better not get merged\n\t\t\t* with a real edge).\n\t\t\t*/\n\t\t\tassert( reg.eUp.winding === 0 );\n\t\t}\n\t\treg.eUp.activeRegion = null;\n\t\ttess.dict.delete( reg.nodeUp );\n\t}\n\n\t//static int FixUpperEdge( TESStesselator *tess, ActiveRegion *reg, TESShalfEdge *newEdge )\n\tSweep.fixUpperEdge = function( tess, reg, newEdge ) {\n\t\t/*\n\t\t* Replace an upper edge which needs fixing (see ConnectRightVertex).\n\t\t*/\n\t\tassert( reg.fixUpperEdge );\n\t\ttess.mesh.delete( reg.eUp );\n\t\treg.fixUpperEdge = false;\n\t\treg.eUp = newEdge;\n\t\tnewEdge.activeRegion = reg;\n\t}\n\n\t//static ActiveRegion *TopLeftRegion( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.topLeftRegion = function( tess, reg ) {\n\t\tvar org = reg.eUp.Org;\n\t\tvar e;\n\n\t\t/* Find the region above the uppermost edge with the same origin */\n\t\tdo {\n\t\t\treg = Sweep.regionAbove( reg );\n\t\t} while( reg.eUp.Org === org );\n\n\t\t/* If the edge above was a temporary edge introduced by ConnectRightVertex,\n\t\t* now is the time to fix it.\n\t\t*/\n\t\tif( reg.fixUpperEdge ) {\n\t\t\te = tess.mesh.connect( Sweep.regionBelow(reg).eUp.Sym, reg.eUp.Lnext );\n\t\t\tif (e === null) return null;\n\t\t\tSweep.fixUpperEdge( tess, reg, e );\n\t\t\treg = Sweep.regionAbove( reg );\n\t\t}\n\t\treturn reg;\n\t}\n\n\t//static ActiveRegion *TopRightRegion( ActiveRegion *reg )\n\tSweep.topRightRegion = function( reg )\n\t{\n\t\tvar dst = reg.eUp.Dst;\n\t\tvar reg = null;\n\t\t/* Find the region above the uppermost edge with the same destination */\n\t\tdo {\n\t\t\treg = Sweep.regionAbove( reg );\n\t\t} while( reg.eUp.Dst === dst );\n\t\treturn reg;\n\t}\n\n\t//static ActiveRegion *AddRegionBelow( TESStesselator *tess, ActiveRegion *regAbove, TESShalfEdge *eNewUp )\n\tSweep.addRegionBelow = function( tess, regAbove, eNewUp ) {\n\t\t/*\n\t\t* Add a new active region to the sweep line, *somewhere* below \"regAbove\"\n\t\t* (according to where the new edge belongs in the sweep-line dictionary).\n\t\t* The upper edge of the new region will be \"eNewUp\".\n\t\t* Winding number and \"inside\" flag are not updated.\n\t\t*/\n\t\tvar regNew = new ActiveRegion();\n\t\tregNew.eUp = eNewUp;\n\t\tregNew.nodeUp = tess.dict.insertBefore( regAbove.nodeUp, regNew );\n\t//\tif (regNew->nodeUp == NULL) longjmp(tess->env,1);\n\t\tregNew.fixUpperEdge = false;\n\t\tregNew.sentinel = false;\n\t\tregNew.dirty = false;\n\n\t\teNewUp.activeRegion = regNew;\n\t\treturn regNew;\n\t}\n\n\t//static int IsWindingInside( TESStesselator *tess, int n )\n\tSweep.isWindingInside = function( tess, n ) {\n\t\tswitch( tess.windingRule ) {\n\t\t\tcase Tess2.WINDING_ODD:\n\t\t\t\treturn (n & 1) != 0;\n\t\t\tcase Tess2.WINDING_NONZERO:\n\t\t\t\treturn (n != 0);\n\t\t\tcase Tess2.WINDING_POSITIVE:\n\t\t\t\treturn (n > 0);\n\t\t\tcase Tess2.WINDING_NEGATIVE:\n\t\t\t\treturn (n < 0);\n\t\t\tcase Tess2.WINDING_ABS_GEQ_TWO:\n\t\t\t\treturn (n >= 2) || (n <= -2);\n\t\t}\n\t\tassert( false );\n\t\treturn false;\n\t}\n\n\t//static void ComputeWinding( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.computeWinding = function( tess, reg ) {\n\t\treg.windingNumber = Sweep.regionAbove(reg).windingNumber + reg.eUp.winding;\n\t\treg.inside = Sweep.isWindingInside( tess, reg.windingNumber );\n\t}\n\n\n\t//static void FinishRegion( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.finishRegion = function( tess, reg ) {\n\t\t/*\n\t\t* Delete a region from the sweep line.  This happens when the upper\n\t\t* and lower chains of a region meet (at a vertex on the sweep line).\n\t\t* The \"inside\" flag is copied to the appropriate mesh face (we could\n\t\t* not do this before -- since the structure of the mesh is always\n\t\t* changing, this face may not have even existed until now).\n\t\t*/\n\t\tvar e = reg.eUp;\n\t\tvar f = e.Lface;\n\n\t\tf.inside = reg.inside;\n\t\tf.anEdge = e;   /* optimization for tessMeshTessellateMonoRegion() */\n\t\tSweep.deleteRegion( tess, reg );\n\t}\n\n\n\t//static TESShalfEdge *FinishLeftRegions( TESStesselator *tess, ActiveRegion *regFirst, ActiveRegion *regLast )\n\tSweep.finishLeftRegions = function( tess, regFirst, regLast ) {\n\t\t/*\n\t\t* We are given a vertex with one or more left-going edges.  All affected\n\t\t* edges should be in the edge dictionary.  Starting at regFirst->eUp,\n\t\t* we walk down deleting all regions where both edges have the same\n\t\t* origin vOrg.  At the same time we copy the \"inside\" flag from the\n\t\t* active region to the face, since at this point each face will belong\n\t\t* to at most one region (this was not necessarily true until this point\n\t\t* in the sweep).  The walk stops at the region above regLast; if regLast\n\t\t* is NULL we walk as far as possible.  At the same time we relink the\n\t\t* mesh if necessary, so that the ordering of edges around vOrg is the\n\t\t* same as in the dictionary.\n\t\t*/\n\t\tvar e, ePrev;\n\t\tvar reg = null;\n\t\tvar regPrev = regFirst;\n\t\tvar ePrev = regFirst.eUp;\n\t\twhile( regPrev !== regLast ) {\n\t\t\tregPrev.fixUpperEdge = false;\t/* placement was OK */\n\t\t\treg = Sweep.regionBelow( regPrev );\n\t\t\te = reg.eUp;\n\t\t\tif( e.Org != ePrev.Org ) {\n\t\t\t\tif( ! reg.fixUpperEdge ) {\n\t\t\t\t\t/* Remove the last left-going edge.  Even though there are no further\n\t\t\t\t\t* edges in the dictionary with this origin, there may be further\n\t\t\t\t\t* such edges in the mesh (if we are adding left edges to a vertex\n\t\t\t\t\t* that has already been processed).  Thus it is important to call\n\t\t\t\t\t* FinishRegion rather than just DeleteRegion.\n\t\t\t\t\t*/\n\t\t\t\t\tSweep.finishRegion( tess, regPrev );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/* If the edge below was a temporary edge introduced by\n\t\t\t\t* ConnectRightVertex, now is the time to fix it.\n\t\t\t\t*/\n\t\t\t\te = tess.mesh.connect( ePrev.Lprev, e.Sym );\n\t//\t\t\tif (e == NULL) longjmp(tess->env,1);\n\t\t\t\tSweep.fixUpperEdge( tess, reg, e );\n\t\t\t}\n\n\t\t\t/* Relink edges so that ePrev->Onext == e */\n\t\t\tif( ePrev.Onext !== e ) {\n\t\t\t\ttess.mesh.splice( e.Oprev, e );\n\t\t\t\ttess.mesh.splice( ePrev, e );\n\t\t\t}\n\t\t\tSweep.finishRegion( tess, regPrev );\t/* may change reg->eUp */\n\t\t\tePrev = reg.eUp;\n\t\t\tregPrev = reg;\n\t\t}\n\t\treturn ePrev;\n\t}\n\n\n\t//static void AddRightEdges( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eFirst, TESShalfEdge *eLast, TESShalfEdge *eTopLeft, int cleanUp )\n\tSweep.addRightEdges = function( tess, regUp, eFirst, eLast, eTopLeft, cleanUp ) {\n\t\t/*\n\t\t* Purpose: insert right-going edges into the edge dictionary, and update\n\t\t* winding numbers and mesh connectivity appropriately.  All right-going\n\t\t* edges share a common origin vOrg.  Edges are inserted CCW starting at\n\t\t* eFirst; the last edge inserted is eLast->Oprev.  If vOrg has any\n\t\t* left-going edges already processed, then eTopLeft must be the edge\n\t\t* such that an imaginary upward vertical segment from vOrg would be\n\t\t* contained between eTopLeft->Oprev and eTopLeft; otherwise eTopLeft\n\t\t* should be NULL.\n\t\t*/\n\t\tvar reg, regPrev;\n\t\tvar e, ePrev;\n\t\tvar firstTime = true;\n\n\t\t/* Insert the new right-going edges in the dictionary */\n\t\te = eFirst;\n\t\tdo {\n\t\t\tassert( Geom.vertLeq( e.Org, e.Dst ));\n\t\t\tSweep.addRegionBelow( tess, regUp, e.Sym );\n\t\t\te = e.Onext;\n\t\t} while ( e !== eLast );\n\n\t\t/* Walk *all* right-going edges from e->Org, in the dictionary order,\n\t\t* updating the winding numbers of each region, and re-linking the mesh\n\t\t* edges to match the dictionary ordering (if necessary).\n\t\t*/\n\t\tif( eTopLeft === null ) {\n\t\t\teTopLeft = Sweep.regionBelow( regUp ).eUp.Rprev;\n\t\t}\n\t\tregPrev = regUp;\n\t\tePrev = eTopLeft;\n\t\tfor( ;; ) {\n\t\t\treg = Sweep.regionBelow( regPrev );\n\t\t\te = reg.eUp.Sym;\n\t\t\tif( e.Org !== ePrev.Org ) break;\n\n\t\t\tif( e.Onext !== ePrev ) {\n\t\t\t\t/* Unlink e from its current position, and relink below ePrev */\n\t\t\t\ttess.mesh.splice( e.Oprev, e );\n\t\t\t\ttess.mesh.splice( ePrev.Oprev, e );\n\t\t\t}\n\t\t\t/* Compute the winding number and \"inside\" flag for the new regions */\n\t\t\treg.windingNumber = regPrev.windingNumber - e.winding;\n\t\t\treg.inside = Sweep.isWindingInside( tess, reg.windingNumber );\n\n\t\t\t/* Check for two outgoing edges with same slope -- process these\n\t\t\t* before any intersection tests (see example in tessComputeInterior).\n\t\t\t*/\n\t\t\tregPrev.dirty = true;\n\t\t\tif( ! firstTime && Sweep.checkForRightSplice( tess, regPrev )) {\n\t\t\t\tSweep.addWinding( e, ePrev );\n\t\t\t\tSweep.deleteRegion( tess, regPrev );\n\t\t\t\ttess.mesh.delete( ePrev );\n\t\t\t}\n\t\t\tfirstTime = false;\n\t\t\tregPrev = reg;\n\t\t\tePrev = e;\n\t\t}\n\t\tregPrev.dirty = true;\n\t\tassert( regPrev.windingNumber - e.winding === reg.windingNumber );\n\n\t\tif( cleanUp ) {\n\t\t\t/* Check for intersections between newly adjacent edges. */\n\t\t\tSweep.walkDirtyRegions( tess, regPrev );\n\t\t}\n\t}\n\n\n\t//static void SpliceMergeVertices( TESStesselator *tess, TESShalfEdge *e1, TESShalfEdge *e2 )\n\tSweep.spliceMergeVertices = function( tess, e1, e2 ) {\n\t\t/*\n\t\t* Two vertices with idential coordinates are combined into one.\n\t\t* e1->Org is kept, while e2->Org is discarded.\n\t\t*/\n\t\ttess.mesh.splice( e1, e2 ); \n\t}\n\n\t//static void VertexWeights( TESSvertex *isect, TESSvertex *org, TESSvertex *dst, TESSreal *weights )\n\tSweep.vertexWeights = function( isect, org, dst ) {\n\t\t/*\n\t\t* Find some weights which describe how the intersection vertex is\n\t\t* a linear combination of \"org\" and \"dest\".  Each of the two edges\n\t\t* which generated \"isect\" is allocated 50% of the weight; each edge\n\t\t* splits the weight between its org and dst according to the\n\t\t* relative distance to \"isect\".\n\t\t*/\n\t\tvar t1 = Geom.vertL1dist( org, isect );\n\t\tvar t2 = Geom.vertL1dist( dst, isect );\n\t\tvar w0 = 0.5 * t2 / (t1 + t2);\n\t\tvar w1 = 0.5 * t1 / (t1 + t2);\n\t\tisect.coords[0] += w0*org.coords[0] + w1*dst.coords[0];\n\t\tisect.coords[1] += w0*org.coords[1] + w1*dst.coords[1];\n\t\tisect.coords[2] += w0*org.coords[2] + w1*dst.coords[2];\n\t}\n\n\n\t//static void GetIntersectData( TESStesselator *tess, TESSvertex *isect, TESSvertex *orgUp, TESSvertex *dstUp, TESSvertex *orgLo, TESSvertex *dstLo )\n\tSweep.getIntersectData = function( tess, isect, orgUp, dstUp, orgLo, dstLo ) {\n\t\t /*\n\t\t * We've computed a new intersection point, now we need a \"data\" pointer\n\t\t * from the user so that we can refer to this new vertex in the\n\t\t * rendering callbacks.\n\t\t */\n\t\tisect.coords[0] = isect.coords[1] = isect.coords[2] = 0;\n\t\tisect.idx = -1;\n\t\tSweep.vertexWeights( isect, orgUp, dstUp );\n\t\tSweep.vertexWeights( isect, orgLo, dstLo );\n\t}\n\n\t//static int CheckForRightSplice( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.checkForRightSplice = function( tess, regUp ) {\n\t\t/*\n\t\t* Check the upper and lower edge of \"regUp\", to make sure that the\n\t\t* eUp->Org is above eLo, or eLo->Org is below eUp (depending on which\n\t\t* origin is leftmost).\n\t\t*\n\t\t* The main purpose is to splice right-going edges with the same\n\t\t* dest vertex and nearly identical slopes (ie. we can't distinguish\n\t\t* the slopes numerically).  However the splicing can also help us\n\t\t* to recover from numerical errors.  For example, suppose at one\n\t\t* point we checked eUp and eLo, and decided that eUp->Org is barely\n\t\t* above eLo.  Then later, we split eLo into two edges (eg. from\n\t\t* a splice operation like this one).  This can change the result of\n\t\t* our test so that now eUp->Org is incident to eLo, or barely below it.\n\t\t* We must correct this condition to maintain the dictionary invariants.\n\t\t*\n\t\t* One possibility is to check these edges for intersection again\n\t\t* (ie. CheckForIntersect).  This is what we do if possible.  However\n\t\t* CheckForIntersect requires that tess->event lies between eUp and eLo,\n\t\t* so that it has something to fall back on when the intersection\n\t\t* calculation gives us an unusable answer.  So, for those cases where\n\t\t* we can't check for intersection, this routine fixes the problem\n\t\t* by just splicing the offending vertex into the other edge.\n\t\t* This is a guaranteed solution, no matter how degenerate things get.\n\t\t* Basically this is a combinatorial solution to a numerical problem.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\n\t\tif( Geom.vertLeq( eUp.Org, eLo.Org )) {\n\t\t\tif( Geom.edgeSign( eLo.Dst, eUp.Org, eLo.Org ) > 0 ) return false;\n\n\t\t\t/* eUp->Org appears to be below eLo */\n\t\t\tif( ! Geom.vertEq( eUp.Org, eLo.Org )) {\n\t\t\t\t/* Splice eUp->Org into eLo */\n\t\t\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\t\t\ttess.mesh.splice( eUp, eLo.Oprev );\n\t\t\t\tregUp.dirty = regLo.dirty = true;\n\n\t\t\t} else if( eUp.Org !== eLo.Org ) {\n\t\t\t\t/* merge the two vertices, discarding eUp->Org */\n\t\t\t\ttess.pq.delete( eUp.Org.pqHandle );\n\t\t\t\tSweep.spliceMergeVertices( tess, eLo.Oprev, eUp );\n\t\t\t}\n\t\t} else {\n\t\t\tif( Geom.edgeSign( eUp.Dst, eLo.Org, eUp.Org ) < 0 ) return false;\n\n\t\t\t/* eLo->Org appears to be above eUp, so splice eLo->Org into eUp */\n\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\n\t\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\t\ttess.mesh.splice( eLo.Oprev, eUp );\n\t\t}\n\t\treturn true;\n\t}\n\n\t//static int CheckForLeftSplice( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.checkForLeftSplice = function( tess, regUp ) {\n\t\t/*\n\t\t* Check the upper and lower edge of \"regUp\", to make sure that the\n\t\t* eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which\n\t\t* destination is rightmost).\n\t\t*\n\t\t* Theoretically, this should always be true.  However, splitting an edge\n\t\t* into two pieces can change the results of previous tests.  For example,\n\t\t* suppose at one point we checked eUp and eLo, and decided that eUp->Dst\n\t\t* is barely above eLo.  Then later, we split eLo into two edges (eg. from\n\t\t* a splice operation like this one).  This can change the result of\n\t\t* the test so that now eUp->Dst is incident to eLo, or barely below it.\n\t\t* We must correct this condition to maintain the dictionary invariants\n\t\t* (otherwise new edges might get inserted in the wrong place in the\n\t\t* dictionary, and bad stuff will happen).\n\t\t*\n\t\t* We fix the problem by just splicing the offending vertex into the\n\t\t* other edge.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\t\tvar e;\n\n\t\tassert( ! Geom.vertEq( eUp.Dst, eLo.Dst ));\n\n\t\tif( Geom.vertLeq( eUp.Dst, eLo.Dst )) {\n\t\t\tif( Geom.edgeSign( eUp.Dst, eLo.Dst, eUp.Org ) < 0 ) return false;\n\n\t\t\t/* eLo->Dst is above eUp, so splice eLo->Dst into eUp */\n\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\n\t\t\te = tess.mesh.splitEdge( eUp );\n\t\t\ttess.mesh.splice( eLo.Sym, e );\n\t\t\te.Lface.inside = regUp.inside;\n\t\t} else {\n\t\t\tif( Geom.edgeSign( eLo.Dst, eUp.Dst, eLo.Org ) > 0 ) return false;\n\n\t\t\t/* eUp->Dst is below eLo, so splice eUp->Dst into eLo */\n\t\t\tregUp.dirty = regLo.dirty = true;\n\t\t\te = tess.mesh.splitEdge( eLo );\n\t\t\ttess.mesh.splice( eUp.Lnext, eLo.Sym );\n\t\t\te.Rface.inside = regUp.inside;\n\t\t}\n\t\treturn true;\n\t}\n\n\n\t//static int CheckForIntersect( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.checkForIntersect = function( tess, regUp ) {\n\t\t/*\n\t\t* Check the upper and lower edges of the given region to see if\n\t\t* they intersect.  If so, create the intersection and add it\n\t\t* to the data structures.\n\t\t*\n\t\t* Returns TRUE if adding the new intersection resulted in a recursive\n\t\t* call to AddRightEdges(); in this case all \"dirty\" regions have been\n\t\t* checked for intersections, and possibly regUp has been deleted.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\t\tvar orgUp = eUp.Org;\n\t\tvar orgLo = eLo.Org;\n\t\tvar dstUp = eUp.Dst;\n\t\tvar dstLo = eLo.Dst;\n\t\tvar tMinUp, tMaxLo;\n\t\tvar isect = new TESSvertex, orgMin;\n\t\tvar e;\n\n\t\tassert( ! Geom.vertEq( dstLo, dstUp ));\n\t\tassert( Geom.edgeSign( dstUp, tess.event, orgUp ) <= 0 );\n\t\tassert( Geom.edgeSign( dstLo, tess.event, orgLo ) >= 0 );\n\t\tassert( orgUp !== tess.event && orgLo !== tess.event );\n\t\tassert( ! regUp.fixUpperEdge && ! regLo.fixUpperEdge );\n\n\t\tif( orgUp === orgLo ) return false;\t/* right endpoints are the same */\n\n\t\ttMinUp = Math.min( orgUp.t, dstUp.t );\n\t\ttMaxLo = Math.max( orgLo.t, dstLo.t );\n\t\tif( tMinUp > tMaxLo ) return false;\t/* t ranges do not overlap */\n\n\t\tif( Geom.vertLeq( orgUp, orgLo )) {\n\t\t\tif( Geom.edgeSign( dstLo, orgUp, orgLo ) > 0 ) return false;\n\t\t} else {\n\t\t\tif( Geom.edgeSign( dstUp, orgLo, orgUp ) < 0 ) return false;\n\t\t}\n\n\t\t/* At this point the edges intersect, at least marginally */\n\t\tSweep.debugEvent( tess );\n\n\t\tGeom.intersect( dstUp, orgUp, dstLo, orgLo, isect );\n\t\t/* The following properties are guaranteed: */\n\t\tassert( Math.min( orgUp.t, dstUp.t ) <= isect.t );\n\t\tassert( isect.t <= Math.max( orgLo.t, dstLo.t ));\n\t\tassert( Math.min( dstLo.s, dstUp.s ) <= isect.s );\n\t\tassert( isect.s <= Math.max( orgLo.s, orgUp.s ));\n\n\t\tif( Geom.vertLeq( isect, tess.event )) {\n\t\t\t/* The intersection point lies slightly to the left of the sweep line,\n\t\t\t* so move it until it''s slightly to the right of the sweep line.\n\t\t\t* (If we had perfect numerical precision, this would never happen\n\t\t\t* in the first place).  The easiest and safest thing to do is\n\t\t\t* replace the intersection by tess->event.\n\t\t\t*/\n\t\t\tisect.s = tess.event.s;\n\t\t\tisect.t = tess.event.t;\n\t\t}\n\t\t/* Similarly, if the computed intersection lies to the right of the\n\t\t* rightmost origin (which should rarely happen), it can cause\n\t\t* unbelievable inefficiency on sufficiently degenerate inputs.\n\t\t* (If you have the test program, try running test54.d with the\n\t\t* \"X zoom\" option turned on).\n\t\t*/\n\t\torgMin = Geom.vertLeq( orgUp, orgLo ) ? orgUp : orgLo;\n\t\tif( Geom.vertLeq( orgMin, isect )) {\n\t\t\tisect.s = orgMin.s;\n\t\t\tisect.t = orgMin.t;\n\t\t}\n\n\t\tif( Geom.vertEq( isect, orgUp ) || Geom.vertEq( isect, orgLo )) {\n\t\t\t/* Easy case -- intersection at one of the right endpoints */\n\t\t\tSweep.checkForRightSplice( tess, regUp );\n\t\t\treturn false;\n\t\t}\n\n\t\tif(    (! Geom.vertEq( dstUp, tess.event )\n\t\t\t&& Geom.edgeSign( dstUp, tess.event, isect ) >= 0)\n\t\t\t|| (! Geom.vertEq( dstLo, tess.event )\n\t\t\t&& Geom.edgeSign( dstLo, tess.event, isect ) <= 0 ))\n\t\t{\n\t\t\t/* Very unusual -- the new upper or lower edge would pass on the\n\t\t\t* wrong side of the sweep event, or through it.  This can happen\n\t\t\t* due to very small numerical errors in the intersection calculation.\n\t\t\t*/\n\t\t\tif( dstLo === tess.event ) {\n\t\t\t\t/* Splice dstLo into eUp, and process the new region(s) */\n\t\t\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\t\t\ttess.mesh.splice( eLo.Sym, eUp );\n\t\t\t\tregUp = Sweep.topLeftRegion( tess, regUp );\n\t//\t\t\tif (regUp == NULL) longjmp(tess->env,1);\n\t\t\t\teUp = Sweep.regionBelow(regUp).eUp;\n\t\t\t\tSweep.finishLeftRegions( tess, Sweep.regionBelow(regUp), regLo );\n\t\t\t\tSweep.addRightEdges( tess, regUp, eUp.Oprev, eUp, eUp, true );\n\t\t\t\treturn TRUE;\n\t\t\t}\n\t\t\tif( dstUp === tess.event ) {\n\t\t\t\t/* Splice dstUp into eLo, and process the new region(s) */\n\t\t\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\t\t\ttess.mesh.splice( eUp.Lnext, eLo.Oprev ); \n\t\t\t\tregLo = regUp;\n\t\t\t\tregUp = Sweep.topRightRegion( regUp );\n\t\t\t\te = Sweep.regionBelow(regUp).eUp.Rprev;\n\t\t\t\tregLo.eUp = eLo.Oprev;\n\t\t\t\teLo = Sweep.finishLeftRegions( tess, regLo, null );\n\t\t\t\tSweep.addRightEdges( tess, regUp, eLo.Onext, eUp.Rprev, e, true );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t/* Special case: called from ConnectRightVertex.  If either\n\t\t\t* edge passes on the wrong side of tess->event, split it\n\t\t\t* (and wait for ConnectRightVertex to splice it appropriately).\n\t\t\t*/\n\t\t\tif( Geom.edgeSign( dstUp, tess.event, isect ) >= 0 ) {\n\t\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\n\t\t\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\t\t\teUp.Org.s = tess.event.s;\n\t\t\t\teUp.Org.t = tess.event.t;\n\t\t\t}\n\t\t\tif( Geom.edgeSign( dstLo, tess.event, isect ) <= 0 ) {\n\t\t\t\tregUp.dirty = regLo.dirty = true;\n\t\t\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\t\t\teLo.Org.s = tess.event.s;\n\t\t\t\teLo.Org.t = tess.event.t;\n\t\t\t}\n\t\t\t/* leave the rest for ConnectRightVertex */\n\t\t\treturn false;\n\t\t}\n\n\t\t/* General case -- split both edges, splice into new vertex.\n\t\t* When we do the splice operation, the order of the arguments is\n\t\t* arbitrary as far as correctness goes.  However, when the operation\n\t\t* creates a new face, the work done is proportional to the size of\n\t\t* the new face.  We expect the faces in the processed part of\n\t\t* the mesh (ie. eUp->Lface) to be smaller than the faces in the\n\t\t* unprocessed original contours (which will be eLo->Oprev->Lface).\n\t\t*/\n\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\ttess.mesh.splice( eLo.Oprev, eUp );\n\t\teUp.Org.s = isect.s;\n\t\teUp.Org.t = isect.t;\n\t\teUp.Org.pqHandle = tess.pq.insert( eUp.Org );\n\t\tSweep.getIntersectData( tess, eUp.Org, orgUp, dstUp, orgLo, dstLo );\n\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = regLo.dirty = true;\n\t\treturn false;\n\t}\n\n\t//static void WalkDirtyRegions( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.walkDirtyRegions = function( tess, regUp ) {\n\t\t/*\n\t\t* When the upper or lower edge of any region changes, the region is\n\t\t* marked \"dirty\".  This routine walks through all the dirty regions\n\t\t* and makes sure that the dictionary invariants are satisfied\n\t\t* (see the comments at the beginning of this file).  Of course\n\t\t* new dirty regions can be created as we make changes to restore\n\t\t* the invariants.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp, eLo;\n\n\t\tfor( ;; ) {\n\t\t\t/* Find the lowest dirty region (we walk from the bottom up). */\n\t\t\twhile( regLo.dirty ) {\n\t\t\t\tregUp = regLo;\n\t\t\t\tregLo = Sweep.regionBelow(regLo);\n\t\t\t}\n\t\t\tif( ! regUp.dirty ) {\n\t\t\t\tregLo = regUp;\n\t\t\t\tregUp = Sweep.regionAbove( regUp );\n\t\t\t\tif( regUp == null || ! regUp.dirty ) {\n\t\t\t\t\t/* We've walked all the dirty regions */\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tregUp.dirty = false;\n\t\t\teUp = regUp.eUp;\n\t\t\teLo = regLo.eUp;\n\n\t\t\tif( eUp.Dst !== eLo.Dst ) {\n\t\t\t\t/* Check that the edge ordering is obeyed at the Dst vertices. */\n\t\t\t\tif( Sweep.checkForLeftSplice( tess, regUp )) {\n\n\t\t\t\t\t/* If the upper or lower edge was marked fixUpperEdge, then\n\t\t\t\t\t* we no longer need it (since these edges are needed only for\n\t\t\t\t\t* vertices which otherwise have no right-going edges).\n\t\t\t\t\t*/\n\t\t\t\t\tif( regLo.fixUpperEdge ) {\n\t\t\t\t\t\tSweep.deleteRegion( tess, regLo );\n\t\t\t\t\t\ttess.mesh.delete( eLo );\n\t\t\t\t\t\tregLo = Sweep.regionBelow( regUp );\n\t\t\t\t\t\teLo = regLo.eUp;\n\t\t\t\t\t} else if( regUp.fixUpperEdge ) {\n\t\t\t\t\t\tSweep.deleteRegion( tess, regUp );\n\t\t\t\t\t\ttess.mesh.delete( eUp );\n\t\t\t\t\t\tregUp = Sweep.regionAbove( regLo );\n\t\t\t\t\t\teUp = regUp.eUp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( eUp.Org !== eLo.Org ) {\n\t\t\t\tif(    eUp.Dst !== eLo.Dst\n\t\t\t\t\t&& ! regUp.fixUpperEdge && ! regLo.fixUpperEdge\n\t\t\t\t\t&& (eUp.Dst === tess.event || eLo.Dst === tess.event) )\n\t\t\t\t{\n\t\t\t\t\t/* When all else fails in CheckForIntersect(), it uses tess->event\n\t\t\t\t\t* as the intersection location.  To make this possible, it requires\n\t\t\t\t\t* that tess->event lie between the upper and lower edges, and also\n\t\t\t\t\t* that neither of these is marked fixUpperEdge (since in the worst\n\t\t\t\t\t* case it might splice one of these edges into tess->event, and\n\t\t\t\t\t* violate the invariant that fixable edges are the only right-going\n\t\t\t\t\t* edge from their associated vertex).\n\t\t\t\t\t*/\n\t\t\t\t\tif( Sweep.checkForIntersect( tess, regUp )) {\n\t\t\t\t\t\t/* WalkDirtyRegions() was called recursively; we're done */\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* Even though we can't use CheckForIntersect(), the Org vertices\n\t\t\t\t\t* may violate the dictionary edge ordering.  Check and correct this.\n\t\t\t\t\t*/\n\t\t\t\t\tSweep.checkForRightSplice( tess, regUp );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( eUp.Org === eLo.Org && eUp.Dst === eLo.Dst ) {\n\t\t\t\t/* A degenerate loop consisting of only two edges -- delete it. */\n\t\t\t\tSweep.addWinding( eLo, eUp );\n\t\t\t\tSweep.deleteRegion( tess, regUp );\n\t\t\t\ttess.mesh.delete( eUp );\n\t\t\t\tregUp = Sweep.regionAbove( regLo );\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//static void ConnectRightVertex( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eBottomLeft )\n\tSweep.connectRightVertex = function( tess, regUp, eBottomLeft ) {\n\t\t/*\n\t\t* Purpose: connect a \"right\" vertex vEvent (one where all edges go left)\n\t\t* to the unprocessed portion of the mesh.  Since there are no right-going\n\t\t* edges, two regions (one above vEvent and one below) are being merged\n\t\t* into one.  \"regUp\" is the upper of these two regions.\n\t\t*\n\t\t* There are two reasons for doing this (adding a right-going edge):\n\t\t*  - if the two regions being merged are \"inside\", we must add an edge\n\t\t*    to keep them separated (the combined region would not be monotone).\n\t\t*  - in any case, we must leave some record of vEvent in the dictionary,\n\t\t*    so that we can merge vEvent with features that we have not seen yet.\n\t\t*    For example, maybe there is a vertical edge which passes just to\n\t\t*    the right of vEvent; we would like to splice vEvent into this edge.\n\t\t*\n\t\t* However, we don't want to connect vEvent to just any vertex.  We don''t\n\t\t* want the new edge to cross any other edges; otherwise we will create\n\t\t* intersection vertices even when the input data had no self-intersections.\n\t\t* (This is a bad thing; if the user's input data has no intersections,\n\t\t* we don't want to generate any false intersections ourselves.)\n\t\t*\n\t\t* Our eventual goal is to connect vEvent to the leftmost unprocessed\n\t\t* vertex of the combined region (the union of regUp and regLo).\n\t\t* But because of unseen vertices with all right-going edges, and also\n\t\t* new vertices which may be created by edge intersections, we don''t\n\t\t* know where that leftmost unprocessed vertex is.  In the meantime, we\n\t\t* connect vEvent to the closest vertex of either chain, and mark the region\n\t\t* as \"fixUpperEdge\".  This flag says to delete and reconnect this edge\n\t\t* to the next processed vertex on the boundary of the combined region.\n\t\t* Quite possibly the vertex we connected to will turn out to be the\n\t\t* closest one, in which case we won''t need to make any changes.\n\t\t*/\n\t\tvar eNew;\n\t\tvar eTopLeft = eBottomLeft.Onext;\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\t\tvar degenerate = false;\n\n\t\tif( eUp.Dst !== eLo.Dst ) {\n\t\t\tSweep.checkForIntersect( tess, regUp );\n\t\t}\n\n\t\t/* Possible new degeneracies: upper or lower edge of regUp may pass\n\t\t* through vEvent, or may coincide with new intersection vertex\n\t\t*/\n\t\tif( Geom.vertEq( eUp.Org, tess.event )) {\n\t\t\ttess.mesh.splice( eTopLeft.Oprev, eUp );\n\t\t\tregUp = Sweep.topLeftRegion( tess, regUp );\n\t\t\teTopLeft = Sweep.regionBelow( regUp ).eUp;\n\t\t\tSweep.finishLeftRegions( tess, Sweep.regionBelow(regUp), regLo );\n\t\t\tdegenerate = true;\n\t\t}\n\t\tif( Geom.vertEq( eLo.Org, tess.event )) {\n\t\t\ttess.mesh.splice( eBottomLeft, eLo.Oprev );\n\t\t\teBottomLeft = Sweep.finishLeftRegions( tess, regLo, null );\n\t\t\tdegenerate = true;\n\t\t}\n\t\tif( degenerate ) {\n\t\t\tSweep.addRightEdges( tess, regUp, eBottomLeft.Onext, eTopLeft, eTopLeft, true );\n\t\t\treturn;\n\t\t}\n\n\t\t/* Non-degenerate situation -- need to add a temporary, fixable edge.\n\t\t* Connect to the closer of eLo->Org, eUp->Org.\n\t\t*/\n\t\tif( Geom.vertLeq( eLo.Org, eUp.Org )) {\n\t\t\teNew = eLo.Oprev;\n\t\t} else {\n\t\t\teNew = eUp;\n\t\t}\n\t\teNew = tess.mesh.connect( eBottomLeft.Lprev, eNew );\n\n\t\t/* Prevent cleanup, otherwise eNew might disappear before we've even\n\t\t* had a chance to mark it as a temporary edge.\n\t\t*/\n\t\tSweep.addRightEdges( tess, regUp, eNew, eNew.Onext, eNew.Onext, false );\n\t\teNew.Sym.activeRegion.fixUpperEdge = true;\n\t\tSweep.walkDirtyRegions( tess, regUp );\n\t}\n\n\t/* Because vertices at exactly the same location are merged together\n\t* before we process the sweep event, some degenerate cases can't occur.\n\t* However if someone eventually makes the modifications required to\n\t* merge features which are close together, the cases below marked\n\t* TOLERANCE_NONZERO will be useful.  They were debugged before the\n\t* code to merge identical vertices in the main loop was added.\n\t*/\n\t//#define TOLERANCE_NONZERO\tFALSE\n\n\t//static void ConnectLeftDegenerate( TESStesselator *tess, ActiveRegion *regUp, TESSvertex *vEvent )\n\tSweep.connectLeftDegenerate = function( tess, regUp, vEvent ) {\n\t\t/*\n\t\t* The event vertex lies exacty on an already-processed edge or vertex.\n\t\t* Adding the new vertex involves splicing it into the already-processed\n\t\t* part of the mesh.\n\t\t*/\n\t\tvar e, eTopLeft, eTopRight, eLast;\n\t\tvar reg;\n\n\t\te = regUp.eUp;\n\t\tif( Geom.vertEq( e.Org, vEvent )) {\n\t\t\t/* e->Org is an unprocessed vertex - just combine them, and wait\n\t\t\t* for e->Org to be pulled from the queue\n\t\t\t*/\n\t\t\tassert( false /*TOLERANCE_NONZERO*/ );\n\t\t\tSweep.spliceMergeVertices( tess, e, vEvent.anEdge );\n\t\t\treturn;\n\t\t}\n\n\t\tif( ! Geom.vertEq( e.Dst, vEvent )) {\n\t\t\t/* General case -- splice vEvent into edge e which passes through it */\n\t\t\ttess.mesh.splitEdge( e.Sym );\n\t\t\tif( regUp.fixUpperEdge ) {\n\t\t\t\t/* This edge was fixable -- delete unused portion of original edge */\n\t\t\t\ttess.mesh.delete( e.Onext );\n\t\t\t\tregUp.fixUpperEdge = false;\n\t\t\t}\n\t\t\ttess.mesh.splice( vEvent.anEdge, e );\n\t\t\tSweep.sweepEvent( tess, vEvent );\t/* recurse */\n\t\t\treturn;\n\t\t}\n\n\t\t/* vEvent coincides with e->Dst, which has already been processed.\n\t\t* Splice in the additional right-going edges.\n\t\t*/\n\t\tassert( false /*TOLERANCE_NONZERO*/ );\n\t\tregUp = Sweep.topRightRegion( regUp );\n\t\treg = Sweep.regionBelow( regUp );\n\t\teTopRight = reg.eUp.Sym;\n\t\teTopLeft = eLast = eTopRight.Onext;\n\t\tif( reg.fixUpperEdge ) {\n\t\t\t/* Here e->Dst has only a single fixable edge going right.\n\t\t\t* We can delete it since now we have some real right-going edges.\n\t\t\t*/\n\t\t\tassert( eTopLeft !== eTopRight );   /* there are some left edges too */\n\t\t\tSweep.deleteRegion( tess, reg );\n\t\t\ttess.mesh.delete( eTopRight );\n\t\t\teTopRight = eTopLeft.Oprev;\n\t\t}\n\t\ttess.mesh.splice( vEvent.anEdge, eTopRight );\n\t\tif( ! Geom.edgeGoesLeft( eTopLeft )) {\n\t\t\t/* e->Dst had no left-going edges -- indicate this to AddRightEdges() */\n\t\t\teTopLeft = null;\n\t\t}\n\t\tSweep.addRightEdges( tess, regUp, eTopRight.Onext, eLast, eTopLeft, true );\n\t}\n\n\n\t//static void ConnectLeftVertex( TESStesselator *tess, TESSvertex *vEvent )\n\tSweep.connectLeftVertex = function( tess, vEvent ) {\n\t\t/*\n\t\t* Purpose: connect a \"left\" vertex (one where both edges go right)\n\t\t* to the processed portion of the mesh.  Let R be the active region\n\t\t* containing vEvent, and let U and L be the upper and lower edge\n\t\t* chains of R.  There are two possibilities:\n\t\t*\n\t\t* - the normal case: split R into two regions, by connecting vEvent to\n\t\t*   the rightmost vertex of U or L lying to the left of the sweep line\n\t\t*\n\t\t* - the degenerate case: if vEvent is close enough to U or L, we\n\t\t*   merge vEvent into that edge chain.  The subcases are:\n\t\t*\t- merging with the rightmost vertex of U or L\n\t\t*\t- merging with the active edge of U or L\n\t\t*\t- merging with an already-processed portion of U or L\n\t\t*/\n\t\tvar regUp, regLo, reg;\n\t\tvar eUp, eLo, eNew;\n\t\tvar tmp = new ActiveRegion();\n\n\t\t/* assert( vEvent->anEdge->Onext->Onext == vEvent->anEdge ); */\n\n\t\t/* Get a pointer to the active region containing vEvent */\n\t\ttmp.eUp = vEvent.anEdge.Sym;\n\t\t/* __GL_DICTLISTKEY */ /* tessDictListSearch */\n\t\tregUp = tess.dict.search( tmp ).key;\n\t\tregLo = Sweep.regionBelow( regUp );\n\t\tif( !regLo ) {\n\t\t\t// This may happen if the input polygon is coplanar.\n\t\t\treturn;\n\t\t}\n\t\teUp = regUp.eUp;\n\t\teLo = regLo.eUp;\n\n\t\t/* Try merging with U or L first */\n\t\tif( Geom.edgeSign( eUp.Dst, vEvent, eUp.Org ) === 0.0 ) {\n\t\t\tSweep.connectLeftDegenerate( tess, regUp, vEvent );\n\t\t\treturn;\n\t\t}\n\n\t\t/* Connect vEvent to rightmost processed vertex of either chain.\n\t\t* e->Dst is the vertex that we will connect to vEvent.\n\t\t*/\n\t\treg = Geom.vertLeq( eLo.Dst, eUp.Dst ) ? regUp : regLo;\n\n\t\tif( regUp.inside || reg.fixUpperEdge) {\n\t\t\tif( reg === regUp ) {\n\t\t\t\teNew = tess.mesh.connect( vEvent.anEdge.Sym, eUp.Lnext );\n\t\t\t} else {\n\t\t\t\tvar tempHalfEdge = tess.mesh.connect( eLo.Dnext, vEvent.anEdge);\n\t\t\t\teNew = tempHalfEdge.Sym;\n\t\t\t}\n\t\t\tif( reg.fixUpperEdge ) {\n\t\t\t\tSweep.fixUpperEdge( tess, reg, eNew );\n\t\t\t} else {\n\t\t\t\tSweep.computeWinding( tess, Sweep.addRegionBelow( tess, regUp, eNew ));\n\t\t\t}\n\t\t\tSweep.sweepEvent( tess, vEvent );\n\t\t} else {\n\t\t\t/* The new vertex is in a region which does not belong to the polygon.\n\t\t\t* We don''t need to connect this vertex to the rest of the mesh.\n\t\t\t*/\n\t\t\tSweep.addRightEdges( tess, regUp, vEvent.anEdge, vEvent.anEdge, null, true );\n\t\t}\n\t};\n\n\n\t//static void SweepEvent( TESStesselator *tess, TESSvertex *vEvent )\n\tSweep.sweepEvent = function( tess, vEvent ) {\n\t\t/*\n\t\t* Does everything necessary when the sweep line crosses a vertex.\n\t\t* Updates the mesh and the edge dictionary.\n\t\t*/\n\n\t\ttess.event = vEvent;\t\t/* for access in EdgeLeq() */\n\t\tSweep.debugEvent( tess );\n\n\t\t/* Check if this vertex is the right endpoint of an edge that is\n\t\t* already in the dictionary.  In this case we don't need to waste\n\t\t* time searching for the location to insert new edges.\n\t\t*/\n\t\tvar e = vEvent.anEdge;\n\t\twhile( e.activeRegion === null ) {\n\t\t\te = e.Onext;\n\t\t\tif( e == vEvent.anEdge ) {\n\t\t\t\t/* All edges go right -- not incident to any processed edges */\n\t\t\t\tSweep.connectLeftVertex( tess, vEvent );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t/* Processing consists of two phases: first we \"finish\" all the\n\t\t* active regions where both the upper and lower edges terminate\n\t\t* at vEvent (ie. vEvent is closing off these regions).\n\t\t* We mark these faces \"inside\" or \"outside\" the polygon according\n\t\t* to their winding number, and delete the edges from the dictionary.\n\t\t* This takes care of all the left-going edges from vEvent.\n\t\t*/\n\t\tvar regUp = Sweep.topLeftRegion( tess, e.activeRegion );\n\t\tassert( regUp !== null );\n\t//\tif (regUp == NULL) longjmp(tess->env,1);\n\t\tvar reg = Sweep.regionBelow( regUp );\n\t\tvar eTopLeft = reg.eUp;\n\t\tvar eBottomLeft = Sweep.finishLeftRegions( tess, reg, null );\n\n\t\t/* Next we process all the right-going edges from vEvent.  This\n\t\t* involves adding the edges to the dictionary, and creating the\n\t\t* associated \"active regions\" which record information about the\n\t\t* regions between adjacent dictionary edges.\n\t\t*/\n\t\tif( eBottomLeft.Onext === eTopLeft ) {\n\t\t\t/* No right-going edges -- add a temporary \"fixable\" edge */\n\t\t\tSweep.connectRightVertex( tess, regUp, eBottomLeft );\n\t\t} else {\n\t\t\tSweep.addRightEdges( tess, regUp, eBottomLeft.Onext, eTopLeft, eTopLeft, true );\n\t\t}\n\t};\n\n\n\t/* Make the sentinel coordinates big enough that they will never be\n\t* merged with real input features.\n\t*/\n\n\t//static void AddSentinel( TESStesselator *tess, TESSreal smin, TESSreal smax, TESSreal t )\n\tSweep.addSentinel = function( tess, smin, smax, t ) {\n\t\t/*\n\t\t* We add two sentinel edges above and below all other edges,\n\t\t* to avoid special cases at the top and bottom.\n\t\t*/\n\t\tvar reg = new ActiveRegion();\n\t\tvar e = tess.mesh.makeEdge();\n\t//\tif (e == NULL) longjmp(tess->env,1);\n\n\t\te.Org.s = smax;\n\t\te.Org.t = t;\n\t\te.Dst.s = smin;\n\t\te.Dst.t = t;\n\t\ttess.event = e.Dst;\t\t/* initialize it */\n\n\t\treg.eUp = e;\n\t\treg.windingNumber = 0;\n\t\treg.inside = false;\n\t\treg.fixUpperEdge = false;\n\t\treg.sentinel = true;\n\t\treg.dirty = false;\n\t\treg.nodeUp = tess.dict.insert( reg );\n\t//\tif (reg->nodeUp == NULL) longjmp(tess->env,1);\n\t}\n\n\n\t//static void InitEdgeDict( TESStesselator *tess )\n\tSweep.initEdgeDict = function( tess ) {\n\t\t/*\n\t\t* We maintain an ordering of edge intersections with the sweep line.\n\t\t* This order is maintained in a dynamic dictionary.\n\t\t*/\n\t\ttess.dict = new Dict( tess, Sweep.edgeLeq );\n\t//\tif (tess->dict == NULL) longjmp(tess->env,1);\n\n\t\tvar w = (tess.bmax[0] - tess.bmin[0]);\n\t\tvar h = (tess.bmax[1] - tess.bmin[1]);\n\n\t\tvar smin = tess.bmin[0] - w;\n\t\tvar smax = tess.bmax[0] + w;\n\t\tvar tmin = tess.bmin[1] - h;\n\t\tvar tmax = tess.bmax[1] + h;\n\n\t\tSweep.addSentinel( tess, smin, smax, tmin );\n\t\tSweep.addSentinel( tess, smin, smax, tmax );\n\t}\n\n\n\tSweep.doneEdgeDict = function( tess )\n\t{\n\t\tvar reg;\n\t\tvar fixedEdges = 0;\n\n\t\twhile( (reg = tess.dict.min().key) !== null ) {\n\t\t\t/*\n\t\t\t* At the end of all processing, the dictionary should contain\n\t\t\t* only the two sentinel edges, plus at most one \"fixable\" edge\n\t\t\t* created by ConnectRightVertex().\n\t\t\t*/\n\t\t\tif( ! reg.sentinel ) {\n\t\t\t\tassert( reg.fixUpperEdge );\n\t\t\t\tassert( ++fixedEdges == 1 );\n\t\t\t}\n\t\t\tassert( reg.windingNumber == 0 );\n\t\t\tSweep.deleteRegion( tess, reg );\n\t\t\t/*    tessMeshDelete( reg->eUp );*/\n\t\t}\n\t//\tdictDeleteDict( &tess->alloc, tess->dict );\n\t}\n\n\n\tSweep.removeDegenerateEdges = function( tess ) {\n\t\t/*\n\t\t* Remove zero-length edges, and contours with fewer than 3 vertices.\n\t\t*/\n\t\tvar e, eNext, eLnext;\n\t\tvar eHead = tess.mesh.eHead;\n\n\t\t/*LINTED*/\n\t\tfor( e = eHead.next; e !== eHead; e = eNext ) {\n\t\t\teNext = e.next;\n\t\t\teLnext = e.Lnext;\n\n\t\t\tif( Geom.vertEq( e.Org, e.Dst ) && e.Lnext.Lnext !== e ) {\n\t\t\t\t/* Zero-length edge, contour has at least 3 edges */\n\t\t\t\tSweep.spliceMergeVertices( tess, eLnext, e );\t/* deletes e->Org */\n\t\t\t\ttess.mesh.delete( e ); /* e is a self-loop */\n\t\t\t\te = eLnext;\n\t\t\t\teLnext = e.Lnext;\n\t\t\t}\n\t\t\tif( eLnext.Lnext === e ) {\n\t\t\t\t/* Degenerate contour (one or two edges) */\n\t\t\t\tif( eLnext !== e ) {\n\t\t\t\t\tif( eLnext === eNext || eLnext === eNext.Sym ) { eNext = eNext.next; }\n\t\t\t\t\ttess.mesh.delete( eLnext );\n\t\t\t\t}\n\t\t\t\tif( e === eNext || e === eNext.Sym ) { eNext = eNext.next; }\n\t\t\t\ttess.mesh.delete( e );\n\t\t\t}\n\t\t}\n\t}\n\n\tSweep.initPriorityQ = function( tess ) {\n\t\t/*\n\t\t* Insert all vertices into the priority queue which determines the\n\t\t* order in which vertices cross the sweep line.\n\t\t*/\n\t\tvar pq;\n\t\tvar v, vHead;\n\t\tvar vertexCount = 0;\n\t\t\n\t\tvHead = tess.mesh.vHead;\n\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\tvertexCount++;\n\t\t}\n\t\t/* Make sure there is enough space for sentinels. */\n\t\tvertexCount += 8; //MAX( 8, tess->alloc.extraVertices );\n\t\t\n\t\tpq = tess.pq = new PriorityQ( vertexCount, Geom.vertLeq );\n\t//\tif (pq == NULL) return 0;\n\n\t\tvHead = tess.mesh.vHead;\n\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\tv.pqHandle = pq.insert( v );\n\t//\t\tif (v.pqHandle == INV_HANDLE)\n\t//\t\t\tbreak;\n\t\t}\n\n\t\tif (v !== vHead) {\n\t\t\treturn false;\n\t\t}\n\n\t\tpq.init();\n\n\t\treturn true;\n\t}\n\n\n\tSweep.donePriorityQ = function( tess ) {\n\t\ttess.pq = null;\n\t}\n\n\n\tSweep.removeDegenerateFaces = function( tess, mesh ) {\n\t\t/*\n\t\t* Delete any degenerate faces with only two edges.  WalkDirtyRegions()\n\t\t* will catch almost all of these, but it won't catch degenerate faces\n\t\t* produced by splice operations on already-processed edges.\n\t\t* The two places this can happen are in FinishLeftRegions(), when\n\t\t* we splice in a \"temporary\" edge produced by ConnectRightVertex(),\n\t\t* and in CheckForLeftSplice(), where we splice already-processed\n\t\t* edges to ensure that our dictionary invariants are not violated\n\t\t* by numerical errors.\n\t\t*\n\t\t* In both these cases it is *very* dangerous to delete the offending\n\t\t* edge at the time, since one of the routines further up the stack\n\t\t* will sometimes be keeping a pointer to that edge.\n\t\t*/\n\t\tvar f, fNext;\n\t\tvar e;\n\n\t\t/*LINTED*/\n\t\tfor( f = mesh.fHead.next; f !== mesh.fHead; f = fNext ) {\n\t\t\tfNext = f.next;\n\t\t\te = f.anEdge;\n\t\t\tassert( e.Lnext !== e );\n\n\t\t\tif( e.Lnext.Lnext === e ) {\n\t\t\t\t/* A face with only two edges */\n\t\t\t\tSweep.addWinding( e.Onext, e );\n\t\t\t\ttess.mesh.delete( e );\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tSweep.computeInterior = function( tess ) {\n\t\t/*\n\t\t* tessComputeInterior( tess ) computes the planar arrangement specified\n\t\t* by the given contours, and further subdivides this arrangement\n\t\t* into regions.  Each region is marked \"inside\" if it belongs\n\t\t* to the polygon, according to the rule given by tess->windingRule.\n\t\t* Each interior region is guaranteed be monotone.\n\t\t*/\n\t\tvar v, vNext;\n\n\t\t/* Each vertex defines an event for our sweep line.  Start by inserting\n\t\t* all the vertices in a priority queue.  Events are processed in\n\t\t* lexicographic order, ie.\n\t\t*\n\t\t*\te1 < e2  iff  e1.x < e2.x || (e1.x == e2.x && e1.y < e2.y)\n\t\t*/\n\t\tSweep.removeDegenerateEdges( tess );\n\t\tif ( !Sweep.initPriorityQ( tess ) ) return false; /* if error */\n\t\tSweep.initEdgeDict( tess );\n\n\t\twhile( (v = tess.pq.extractMin()) !== null ) {\n\t\t\tfor( ;; ) {\n\t\t\t\tvNext = tess.pq.min();\n\t\t\t\tif( vNext === null || ! Geom.vertEq( vNext, v )) break;\n\n\t\t\t\t/* Merge together all vertices at exactly the same location.\n\t\t\t\t* This is more efficient than processing them one at a time,\n\t\t\t\t* simplifies the code (see ConnectLeftDegenerate), and is also\n\t\t\t\t* important for correct handling of certain degenerate cases.\n\t\t\t\t* For example, suppose there are two identical edges A and B\n\t\t\t\t* that belong to different contours (so without this code they would\n\t\t\t\t* be processed by separate sweep events).  Suppose another edge C\n\t\t\t\t* crosses A and B from above.  When A is processed, we split it\n\t\t\t\t* at its intersection point with C.  However this also splits C,\n\t\t\t\t* so when we insert B we may compute a slightly different\n\t\t\t\t* intersection point.  This might leave two edges with a small\n\t\t\t\t* gap between them.  This kind of error is especially obvious\n\t\t\t\t* when using boundary extraction (TESS_BOUNDARY_ONLY).\n\t\t\t\t*/\n\t\t\t\tvNext = tess.pq.extractMin();\n\t\t\t\tSweep.spliceMergeVertices( tess, v.anEdge, vNext.anEdge );\n\t\t\t}\n\t\t\tSweep.sweepEvent( tess, v );\n\t\t}\n\n\t\t/* Set tess->event for debugging purposes */\n\t\ttess.event = tess.dict.min().key.eUp.Org;\n\t\tSweep.debugEvent( tess );\n\t\tSweep.doneEdgeDict( tess );\n\t\tSweep.donePriorityQ( tess );\n\n\t\tif ( !Sweep.removeDegenerateFaces( tess, tess.mesh ) ) return false;\n\t\ttess.mesh.check();\n\n\t\treturn true;\n\t}\n\n\n\tfunction Tesselator() {\n\n\t\t/*** state needed for collecting the input data ***/\n\t\tthis.mesh = null;\t\t/* stores the input contours, and eventually\n\t\t\t\t\t\t\tthe tessellation itself */\n\n\t\t/*** state needed for projecting onto the sweep plane ***/\n\n\t\tthis.normal = [0.0, 0.0, 0.0];\t/* user-specified normal (if provided) */\n\t\tthis.sUnit = [0.0, 0.0, 0.0];\t/* unit vector in s-direction (debugging) */\n\t\tthis.tUnit = [0.0, 0.0, 0.0];\t/* unit vector in t-direction (debugging) */\n\n\t\tthis.bmin = [0.0, 0.0];\n\t\tthis.bmax = [0.0, 0.0];\n\n\t\t/*** state needed for the line sweep ***/\n\t\tthis.windingRule = Tess2.WINDING_ODD;\t/* rule for determining polygon interior */\n\n\t\tthis.dict = null;\t\t/* edge dictionary for sweep line */\n\t\tthis.pq = null;\t\t/* priority queue of vertex events */\n\t\tthis.event = null;\t\t/* current sweep event being processed */\n\n\t\tthis.vertexIndexCounter = 0;\n\t\t\n\t\tthis.vertices = [];\n\t\tthis.vertexIndices = [];\n\t\tthis.vertexCount = 0;\n\t\tthis.elements = [];\n\t\tthis.elementCount = 0;\n\t};\n\n\tTesselator.prototype = {\n\n\t\tdot_: function(u, v) {\n\t\t\treturn (u[0]*v[0] + u[1]*v[1] + u[2]*v[2]);\n\t\t},\n\n\t\tnormalize_: function( v ) {\n\t\t\tvar len = v[0]*v[0] + v[1]*v[1] + v[2]*v[2];\n\t\t\tassert( len > 0.0 );\n\t\t\tlen = Math.sqrt( len );\n\t\t\tv[0] /= len;\n\t\t\tv[1] /= len;\n\t\t\tv[2] /= len;\n\t\t},\n\n\t\tlongAxis_: function( v ) {\n\t\t\tvar i = 0;\n\t\t\tif( Math.abs(v[1]) > Math.abs(v[0]) ) { i = 1; }\n\t\t\tif( Math.abs(v[2]) > Math.abs(v[i]) ) { i = 2; }\n\t\t\treturn i;\n\t\t},\n\n\t\tcomputeNormal_: function( norm )\n\t\t{\n\t\t\tvar v, v1, v2;\n\t\t\tvar c, tLen2, maxLen2;\n\t\t\tvar maxVal = [0,0,0], minVal = [0,0,0], d1 = [0,0,0], d2 = [0,0,0], tNorm = [0,0,0];\n\t\t\tvar maxVert = [null,null,null], minVert = [null,null,null];\n\t\t\tvar vHead = this.mesh.vHead;\n\t\t\tvar i;\n\n\t\t\tv = vHead.next;\n\t\t\tfor( i = 0; i < 3; ++i ) {\n\t\t\t\tc = v.coords[i];\n\t\t\t\tminVal[i] = c;\n\t\t\t\tminVert[i] = v;\n\t\t\t\tmaxVal[i] = c;\n\t\t\t\tmaxVert[i] = v;\n\t\t\t}\n\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\tfor( i = 0; i < 3; ++i ) {\n\t\t\t\t\tc = v.coords[i];\n\t\t\t\t\tif( c < minVal[i] ) { minVal[i] = c; minVert[i] = v; }\n\t\t\t\t\tif( c > maxVal[i] ) { maxVal[i] = c; maxVert[i] = v; }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Find two vertices separated by at least 1/sqrt(3) of the maximum\n\t\t\t* distance between any two vertices\n\t\t\t*/\n\t\t\ti = 0;\n\t\t\tif( maxVal[1] - minVal[1] > maxVal[0] - minVal[0] ) { i = 1; }\n\t\t\tif( maxVal[2] - minVal[2] > maxVal[i] - minVal[i] ) { i = 2; }\n\t\t\tif( minVal[i] >= maxVal[i] ) {\n\t\t\t\t/* All vertices are the same -- normal doesn't matter */\n\t\t\t\tnorm[0] = 0; norm[1] = 0; norm[2] = 1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/* Look for a third vertex which forms the triangle with maximum area\n\t\t\t* (Length of normal == twice the triangle area)\n\t\t\t*/\n\t\t\tmaxLen2 = 0;\n\t\t\tv1 = minVert[i];\n\t\t\tv2 = maxVert[i];\n\t\t\td1[0] = v1.coords[0] - v2.coords[0];\n\t\t\td1[1] = v1.coords[1] - v2.coords[1];\n\t\t\td1[2] = v1.coords[2] - v2.coords[2];\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\td2[0] = v.coords[0] - v2.coords[0];\n\t\t\t\td2[1] = v.coords[1] - v2.coords[1];\n\t\t\t\td2[2] = v.coords[2] - v2.coords[2];\n\t\t\t\ttNorm[0] = d1[1]*d2[2] - d1[2]*d2[1];\n\t\t\t\ttNorm[1] = d1[2]*d2[0] - d1[0]*d2[2];\n\t\t\t\ttNorm[2] = d1[0]*d2[1] - d1[1]*d2[0];\n\t\t\t\ttLen2 = tNorm[0]*tNorm[0] + tNorm[1]*tNorm[1] + tNorm[2]*tNorm[2];\n\t\t\t\tif( tLen2 > maxLen2 ) {\n\t\t\t\t\tmaxLen2 = tLen2;\n\t\t\t\t\tnorm[0] = tNorm[0];\n\t\t\t\t\tnorm[1] = tNorm[1];\n\t\t\t\t\tnorm[2] = tNorm[2];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( maxLen2 <= 0 ) {\n\t\t\t\t/* All points lie on a single line -- any decent normal will do */\n\t\t\t\tnorm[0] = norm[1] = norm[2] = 0;\n\t\t\t\tnorm[this.longAxis_(d1)] = 1;\n\t\t\t}\n\t\t},\n\n\t\tcheckOrientation_: function() {\n\t\t\tvar area;\n\t\t\tvar f, fHead = this.mesh.fHead;\n\t\t\tvar v, vHead = this.mesh.vHead;\n\t\t\tvar e;\n\n\t\t\t/* When we compute the normal automatically, we choose the orientation\n\t\t\t* so that the the sum of the signed areas of all contours is non-negative.\n\t\t\t*/\n\t\t\tarea = 0;\n\t\t\tfor( f = fHead.next; f !== fHead; f = f.next ) {\n\t\t\t\te = f.anEdge;\n\t\t\t\tif( e.winding <= 0 ) continue;\n\t\t\t\tdo {\n\t\t\t\t\tarea += (e.Org.s - e.Dst.s) * (e.Org.t + e.Dst.t);\n\t\t\t\t\te = e.Lnext;\n\t\t\t\t} while( e !== f.anEdge );\n\t\t\t}\n\t\t\tif( area < 0 ) {\n\t\t\t\t/* Reverse the orientation by flipping all the t-coordinates */\n\t\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\t\tv.t = - v.t;\n\t\t\t\t}\n\t\t\t\tthis.tUnit[0] = - this.tUnit[0];\n\t\t\t\tthis.tUnit[1] = - this.tUnit[1];\n\t\t\t\tthis.tUnit[2] = - this.tUnit[2];\n\t\t\t}\n\t\t},\n\n\t/*\t#ifdef FOR_TRITE_TEST_PROGRAM\n\t\t#include <stdlib.h>\n\t\textern int RandomSweep;\n\t\t#define S_UNIT_X\t(RandomSweep ? (2*drand48()-1) : 1.0)\n\t\t#define S_UNIT_Y\t(RandomSweep ? (2*drand48()-1) : 0.0)\n\t\t#else\n\t\t#if defined(SLANTED_SWEEP) */\n\t\t/* The \"feature merging\" is not intended to be complete.  There are\n\t\t* special cases where edges are nearly parallel to the sweep line\n\t\t* which are not implemented.  The algorithm should still behave\n\t\t* robustly (ie. produce a reasonable tesselation) in the presence\n\t\t* of such edges, however it may miss features which could have been\n\t\t* merged.  We could minimize this effect by choosing the sweep line\n\t\t* direction to be something unusual (ie. not parallel to one of the\n\t\t* coordinate axes).\n\t\t*/\n\t/*\t#define S_UNIT_X\t(TESSreal)0.50941539564955385\t// Pre-normalized\n\t\t#define S_UNIT_Y\t(TESSreal)0.86052074622010633\n\t\t#else\n\t\t#define S_UNIT_X\t(TESSreal)1.0\n\t\t#define S_UNIT_Y\t(TESSreal)0.0\n\t\t#endif\n\t\t#endif*/\n\n\t\t/* Determine the polygon normal and project vertices onto the plane\n\t\t* of the polygon.\n\t\t*/\n\t\tprojectPolygon_: function() {\n\t\t\tvar v, vHead = this.mesh.vHead;\n\t\t\tvar norm = [0,0,0];\n\t\t\tvar sUnit, tUnit;\n\t\t\tvar i, first, computedNormal = false;\n\n\t\t\tnorm[0] = this.normal[0];\n\t\t\tnorm[1] = this.normal[1];\n\t\t\tnorm[2] = this.normal[2];\n\t\t\tif( norm[0] === 0.0 && norm[1] === 0.0 && norm[2] === 0.0 ) {\n\t\t\t\tthis.computeNormal_( norm );\n\t\t\t\tcomputedNormal = true;\n\t\t\t}\n\t\t\tsUnit = this.sUnit;\n\t\t\ttUnit = this.tUnit;\n\t\t\ti = this.longAxis_( norm );\n\n\t/*\t#if defined(FOR_TRITE_TEST_PROGRAM) || defined(TRUE_PROJECT)\n\t\t\t// Choose the initial sUnit vector to be approximately perpendicular\n\t\t\t// to the normal.\n\t\t\t\n\t\t\tNormalize( norm );\n\n\t\t\tsUnit[i] = 0;\n\t\t\tsUnit[(i+1)%3] = S_UNIT_X;\n\t\t\tsUnit[(i+2)%3] = S_UNIT_Y;\n\n\t\t\t// Now make it exactly perpendicular \n\t\t\tw = Dot( sUnit, norm );\n\t\t\tsUnit[0] -= w * norm[0];\n\t\t\tsUnit[1] -= w * norm[1];\n\t\t\tsUnit[2] -= w * norm[2];\n\t\t\tNormalize( sUnit );\n\n\t\t\t// Choose tUnit so that (sUnit,tUnit,norm) form a right-handed frame \n\t\t\ttUnit[0] = norm[1]*sUnit[2] - norm[2]*sUnit[1];\n\t\t\ttUnit[1] = norm[2]*sUnit[0] - norm[0]*sUnit[2];\n\t\t\ttUnit[2] = norm[0]*sUnit[1] - norm[1]*sUnit[0];\n\t\t\tNormalize( tUnit );\n\t\t#else*/\n\t\t\t/* Project perpendicular to a coordinate axis -- better numerically */\n\t\t\tsUnit[i] = 0;\n\t\t\tsUnit[(i+1)%3] = 1.0;\n\t\t\tsUnit[(i+2)%3] = 0.0;\n\n\t\t\ttUnit[i] = 0;\n\t\t\ttUnit[(i+1)%3] = 0.0;\n\t\t\ttUnit[(i+2)%3] = (norm[i] > 0) ? 1.0 : -1.0;\n\t//\t#endif\n\n\t\t\t/* Project the vertices onto the sweep plane */\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\tv.s = this.dot_( v.coords, sUnit );\n\t\t\t\tv.t = this.dot_( v.coords, tUnit );\n\t\t\t}\n\t\t\tif( computedNormal ) {\n\t\t\t\tthis.checkOrientation_();\n\t\t\t}\n\n\t\t\t/* Compute ST bounds. */\n\t\t\tfirst = true;\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\tif (first) {\n\t\t\t\t\tthis.bmin[0] = this.bmax[0] = v.s;\n\t\t\t\t\tthis.bmin[1] = this.bmax[1] = v.t;\n\t\t\t\t\tfirst = false;\n\t\t\t\t} else {\n\t\t\t\t\tif (v.s < this.bmin[0]) this.bmin[0] = v.s;\n\t\t\t\t\tif (v.s > this.bmax[0]) this.bmax[0] = v.s;\n\t\t\t\t\tif (v.t < this.bmin[1]) this.bmin[1] = v.t;\n\t\t\t\t\tif (v.t > this.bmax[1]) this.bmax[1] = v.t;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\taddWinding_: function(eDst,eSrc) {\n\t\t\teDst.winding += eSrc.winding;\n\t\t\teDst.Sym.winding += eSrc.Sym.winding;\n\t\t},\n\t\t\n\t\t/* tessMeshTessellateMonoRegion( face ) tessellates a monotone region\n\t\t* (what else would it do??)  The region must consist of a single\n\t\t* loop of half-edges (see mesh.h) oriented CCW.  \"Monotone\" in this\n\t\t* case means that any vertical line intersects the interior of the\n\t\t* region in a single interval.  \n\t\t*\n\t\t* Tessellation consists of adding interior edges (actually pairs of\n\t\t* half-edges), to split the region into non-overlapping triangles.\n\t\t*\n\t\t* The basic idea is explained in Preparata and Shamos (which I don''t\n\t\t* have handy right now), although their implementation is more\n\t\t* complicated than this one.  The are two edge chains, an upper chain\n\t\t* and a lower chain.  We process all vertices from both chains in order,\n\t\t* from right to left.\n\t\t*\n\t\t* The algorithm ensures that the following invariant holds after each\n\t\t* vertex is processed: the untessellated region consists of two\n\t\t* chains, where one chain (say the upper) is a single edge, and\n\t\t* the other chain is concave.  The left vertex of the single edge\n\t\t* is always to the left of all vertices in the concave chain.\n\t\t*\n\t\t* Each step consists of adding the rightmost unprocessed vertex to one\n\t\t* of the two chains, and forming a fan of triangles from the rightmost\n\t\t* of two chain endpoints.  Determining whether we can add each triangle\n\t\t* to the fan is a simple orientation test.  By making the fan as large\n\t\t* as possible, we restore the invariant (check it yourself).\n\t\t*/\n\t//\tint tessMeshTessellateMonoRegion( TESSmesh *mesh, TESSface *face )\n\t\ttessellateMonoRegion_: function( mesh, face ) {\n\t\t\tvar up, lo;\n\n\t\t\t/* All edges are oriented CCW around the boundary of the region.\n\t\t\t* First, find the half-edge whose origin vertex is rightmost.\n\t\t\t* Since the sweep goes from left to right, face->anEdge should\n\t\t\t* be close to the edge we want.\n\t\t\t*/\n\t\t\tup = face.anEdge;\n\t\t\tassert( up.Lnext !== up && up.Lnext.Lnext !== up );\n\n\t\t\tfor( ; Geom.vertLeq( up.Dst, up.Org ); up = up.Lprev )\n\t\t\t\t;\n\t\t\tfor( ; Geom.vertLeq( up.Org, up.Dst ); up = up.Lnext )\n\t\t\t\t;\n\t\t\tlo = up.Lprev;\n\n\t\t\twhile( up.Lnext !== lo ) {\n\t\t\t\tif( Geom.vertLeq( up.Dst, lo.Org )) {\n\t\t\t\t\t/* up->Dst is on the left.  It is safe to form triangles from lo->Org.\n\t\t\t\t\t* The EdgeGoesLeft test guarantees progress even when some triangles\n\t\t\t\t\t* are CW, given that the upper and lower chains are truly monotone.\n\t\t\t\t\t*/\n\t\t\t\t\twhile( lo.Lnext !== up && (Geom.edgeGoesLeft( lo.Lnext )\n\t\t\t\t\t\t|| Geom.edgeSign( lo.Org, lo.Dst, lo.Lnext.Dst ) <= 0.0 )) {\n\t\t\t\t\t\t\tvar tempHalfEdge = mesh.connect( lo.Lnext, lo );\n\t\t\t\t\t\t\t//if (tempHalfEdge == NULL) return 0;\n\t\t\t\t\t\t\tlo = tempHalfEdge.Sym;\n\t\t\t\t\t}\n\t\t\t\t\tlo = lo.Lprev;\n\t\t\t\t} else {\n\t\t\t\t\t/* lo->Org is on the left.  We can make CCW triangles from up->Dst. */\n\t\t\t\t\twhile( lo.Lnext != up && (Geom.edgeGoesRight( up.Lprev )\n\t\t\t\t\t\t|| Geom.edgeSign( up.Dst, up.Org, up.Lprev.Org ) >= 0.0 )) {\n\t\t\t\t\t\t\tvar tempHalfEdge = mesh.connect( up, up.Lprev );\n\t\t\t\t\t\t\t//if (tempHalfEdge == NULL) return 0;\n\t\t\t\t\t\t\tup = tempHalfEdge.Sym;\n\t\t\t\t\t}\n\t\t\t\t\tup = up.Lnext;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Now lo->Org == up->Dst == the leftmost vertex.  The remaining region\n\t\t\t* can be tessellated in a fan from this leftmost vertex.\n\t\t\t*/\n\t\t\tassert( lo.Lnext !== up );\n\t\t\twhile( lo.Lnext.Lnext !== up ) {\n\t\t\t\tvar tempHalfEdge = mesh.connect( lo.Lnext, lo );\n\t\t\t\t//if (tempHalfEdge == NULL) return 0;\n\t\t\t\tlo = tempHalfEdge.Sym;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\n\t\t/* tessMeshTessellateInterior( mesh ) tessellates each region of\n\t\t* the mesh which is marked \"inside\" the polygon.  Each such region\n\t\t* must be monotone.\n\t\t*/\n\t\t//int tessMeshTessellateInterior( TESSmesh *mesh )\n\t\ttessellateInterior_: function( mesh ) {\n\t\t\tvar f, next;\n\n\t\t\t/*LINTED*/\n\t\t\tfor( f = mesh.fHead.next; f !== mesh.fHead; f = next ) {\n\t\t\t\t/* Make sure we don''t try to tessellate the new triangles. */\n\t\t\t\tnext = f.next;\n\t\t\t\tif( f.inside ) {\n\t\t\t\t\tif ( !this.tessellateMonoRegion_( mesh, f ) ) return false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\n\t\t/* tessMeshDiscardExterior( mesh ) zaps (ie. sets to NULL) all faces\n\t\t* which are not marked \"inside\" the polygon.  Since further mesh operations\n\t\t* on NULL faces are not allowed, the main purpose is to clean up the\n\t\t* mesh so that exterior loops are not represented in the data structure.\n\t\t*/\n\t\t//void tessMeshDiscardExterior( TESSmesh *mesh )\n\t\tdiscardExterior_: function( mesh ) {\n\t\t\tvar f, next;\n\n\t\t\t/*LINTED*/\n\t\t\tfor( f = mesh.fHead.next; f !== mesh.fHead; f = next ) {\n\t\t\t\t/* Since f will be destroyed, save its next pointer. */\n\t\t\t\tnext = f.next;\n\t\t\t\tif( ! f.inside ) {\n\t\t\t\t\tmesh.zapFace( f );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/* tessMeshSetWindingNumber( mesh, value, keepOnlyBoundary ) resets the\n\t\t* winding numbers on all edges so that regions marked \"inside\" the\n\t\t* polygon have a winding number of \"value\", and regions outside\n\t\t* have a winding number of 0.\n\t\t*\n\t\t* If keepOnlyBoundary is TRUE, it also deletes all edges which do not\n\t\t* separate an interior region from an exterior one.\n\t\t*/\n\t//\tint tessMeshSetWindingNumber( TESSmesh *mesh, int value, int keepOnlyBoundary )\n\t\tsetWindingNumber_: function( mesh, value, keepOnlyBoundary ) {\n\t\t\tvar e, eNext;\n\n\t\t\tfor( e = mesh.eHead.next; e !== mesh.eHead; e = eNext ) {\n\t\t\t\teNext = e.next;\n\t\t\t\tif( e.Rface.inside !== e.Lface.inside ) {\n\n\t\t\t\t\t/* This is a boundary edge (one side is interior, one is exterior). */\n\t\t\t\t\te.winding = (e.Lface.inside) ? value : -value;\n\t\t\t\t} else {\n\n\t\t\t\t\t/* Both regions are interior, or both are exterior. */\n\t\t\t\t\tif( ! keepOnlyBoundary ) {\n\t\t\t\t\t\te.winding = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmesh.delete( e );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgetNeighbourFace_: function(edge)\n\t\t{\n\t\t\tif (!edge.Rface)\n\t\t\t\treturn -1;\n\t\t\tif (!edge.Rface.inside)\n\t\t\t\treturn -1;\n\t\t\treturn edge.Rface.n;\n\t\t},\n\n\t\toutputPolymesh_: function( mesh, elementType, polySize, vertexSize ) {\n\t\t\tvar v;\n\t\t\tvar f;\n\t\t\tvar edge;\n\t\t\tvar maxFaceCount = 0;\n\t\t\tvar maxVertexCount = 0;\n\t\t\tvar faceVerts, i;\n\t\t\tvar elements = 0;\n\t\t\tvar vert;\n\n\t\t\t// Assume that the input data is triangles now.\n\t\t\t// Try to merge as many polygons as possible\n\t\t\tif (polySize > 3)\n\t\t\t{\n\t\t\t\tmesh.mergeConvexFaces( polySize );\n\t\t\t}\n\n\t\t\t// Mark unused\n\t\t\tfor ( v = mesh.vHead.next; v !== mesh.vHead; v = v.next )\n\t\t\t\tv.n = -1;\n\n\t\t\t// Create unique IDs for all vertices and faces.\n\t\t\tfor ( f = mesh.fHead.next; f != mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tf.n = -1;\n\t\t\t\tif( !f.inside ) continue;\n\n\t\t\t\tedge = f.anEdge;\n\t\t\t\tfaceVerts = 0;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tv = edge.Org;\n\t\t\t\t\tif ( v.n === -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tv.n = maxVertexCount;\n\t\t\t\t\t\tmaxVertexCount++;\n\t\t\t\t\t}\n\t\t\t\t\tfaceVerts++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile (edge !== f.anEdge);\n\t\t\t\t\n\t\t\t\tassert( faceVerts <= polySize );\n\n\t\t\t\tf.n = maxFaceCount;\n\t\t\t\t++maxFaceCount;\n\t\t\t}\n\n\t\t\tthis.elementCount = maxFaceCount;\n\t\t\tif (elementType == Tess2.CONNECTED_POLYGONS)\n\t\t\t\tmaxFaceCount *= 2;\n\t/*\t\ttess.elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSindex) * maxFaceCount * polySize );\n\t\t\tif (!tess->elements)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.elements = [];\n\t\t\tthis.elements.length = maxFaceCount * polySize;\n\t\t\t\n\t\t\tthis.vertexCount = maxVertexCount;\n\t/*\t\ttess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t sizeof(TESSreal) * tess->vertexCount * vertexSize );\n\t\t\tif (!tess->vertices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertices = [];\n\t\t\tthis.vertices.length = maxVertexCount * vertexSize;\n\n\t/*\t\ttess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    sizeof(TESSindex) * tess->vertexCount );\n\t\t\tif (!tess->vertexIndices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertexIndices = [];\n\t\t\tthis.vertexIndices.length = maxVertexCount;\n\n\t\t\t\n\t\t\t// Output vertices.\n\t\t\tfor ( v = mesh.vHead.next; v !== mesh.vHead; v = v.next )\n\t\t\t{\n\t\t\t\tif ( v.n != -1 )\n\t\t\t\t{\n\t\t\t\t\t// Store coordinate\n\t\t\t\t\tvar idx = v.n * vertexSize;\n\t\t\t\t\tthis.vertices[idx+0] = v.coords[0];\n\t\t\t\t\tthis.vertices[idx+1] = v.coords[1];\n\t\t\t\t\tif ( vertexSize > 2 )\n\t\t\t\t\t\tthis.vertices[idx+2] = v.coords[2];\n\t\t\t\t\t// Store vertex index.\n\t\t\t\t\tthis.vertexIndices[v.n] = v.idx;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Output indices.\n\t\t\tvar nel = 0;\n\t\t\tfor ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tif ( !f.inside ) continue;\n\t\t\t\t\n\t\t\t\t// Store polygon\n\t\t\t\tedge = f.anEdge;\n\t\t\t\tfaceVerts = 0;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tv = edge.Org;\n\t\t\t\t\tthis.elements[nel++] = v.n;\n\t\t\t\t\tfaceVerts++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile (edge !== f.anEdge);\n\t\t\t\t// Fill unused.\n\t\t\t\tfor (i = faceVerts; i < polySize; ++i)\n\t\t\t\t\tthis.elements[nel++] = -1;\n\n\t\t\t\t// Store polygon connectivity\n\t\t\t\tif ( elementType == Tess2.CONNECTED_POLYGONS )\n\t\t\t\t{\n\t\t\t\t\tedge = f.anEdge;\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.elements[nel++] = this.getNeighbourFace_( edge );\n\t\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t\t}\n\t\t\t\t\twhile (edge !== f.anEdge);\n\t\t\t\t\t// Fill unused.\n\t\t\t\t\tfor (i = faceVerts; i < polySize; ++i)\n\t\t\t\t\t\tthis.elements[nel++] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t//\tvoid OutputContours( TESStesselator *tess, TESSmesh *mesh, int vertexSize )\n\t\toutputContours_: function( mesh, vertexSize ) {\n\t\t\tvar f;\n\t\t\tvar edge;\n\t\t\tvar start;\n\t\t\tvar verts;\n\t\t\tvar elements;\n\t\t\tvar vertInds;\n\t\t\tvar startVert = 0;\n\t\t\tvar vertCount = 0;\n\n\t\t\tthis.vertexCount = 0;\n\t\t\tthis.elementCount = 0;\n\n\t\t\tfor ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tif ( !f.inside ) continue;\n\n\t\t\t\tstart = edge = f.anEdge;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tthis.vertexCount++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile ( edge !== start );\n\n\t\t\t\tthis.elementCount++;\n\t\t\t}\n\n\t/*\t\ttess->elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSindex) * tess->elementCount * 2 );\n\t\t\tif (!tess->elements)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.elements = [];\n\t\t\tthis.elements.length = this.elementCount * 2;\n\t\t\t\n\t/*\t\ttess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSreal) * tess->vertexCount * vertexSize );\n\t\t\tif (!tess->vertices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertices = [];\n\t\t\tthis.vertices.length = this.vertexCount * vertexSize;\n\n\t/*\t\ttess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    sizeof(TESSindex) * tess->vertexCount );\n\t\t\tif (!tess->vertexIndices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertexIndices = [];\n\t\t\tthis.vertexIndices.length = this.vertexCount;\n\n\t\t\tvar nv = 0;\n\t\t\tvar nvi = 0;\n\t\t\tvar nel = 0;\n\t\t\tstartVert = 0;\n\n\t\t\tfor ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tif ( !f.inside ) continue;\n\n\t\t\t\tvertCount = 0;\n\t\t\t\tstart = edge = f.anEdge;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tthis.vertices[nv++] = edge.Org.coords[0];\n\t\t\t\t\tthis.vertices[nv++] = edge.Org.coords[1];\n\t\t\t\t\tif ( vertexSize > 2 )\n\t\t\t\t\t\tthis.vertices[nv++] = edge.Org.coords[2];\n\t\t\t\t\tthis.vertexIndices[nvi++] = edge.Org.idx;\n\t\t\t\t\tvertCount++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile ( edge !== start );\n\n\t\t\t\tthis.elements[nel++] = startVert;\n\t\t\t\tthis.elements[nel++] = vertCount;\n\n\t\t\t\tstartVert += vertCount;\n\t\t\t}\n\t\t},\n\n\t\taddContour: function( size, vertices )\n\t\t{\n\t\t\tvar e;\n\t\t\tvar i;\n\n\t\t\tif ( this.mesh === null )\n\t\t\t  \tthis.mesh = new TESSmesh();\n\t/*\t \tif ( tess->mesh == NULL ) {\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\n\t\t\tif ( size < 2 )\n\t\t\t\tsize = 2;\n\t\t\tif ( size > 3 )\n\t\t\t\tsize = 3;\n\n\t\t\te = null;\n\n\t\t\tfor( i = 0; i < vertices.length; i += size )\n\t\t\t{\n\t\t\t\tif( e == null ) {\n\t\t\t\t\t/* Make a self-loop (one vertex, one edge). */\n\t\t\t\t\te = this.mesh.makeEdge();\n\t/*\t\t\t\tif ( e == NULL ) {\n\t\t\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}*/\n\t\t\t\t\tthis.mesh.splice( e, e.Sym );\n\t\t\t\t} else {\n\t\t\t\t\t/* Create a new vertex and edge which immediately follow e\n\t\t\t\t\t* in the ordering around the left face.\n\t\t\t\t\t*/\n\t\t\t\t\tthis.mesh.splitEdge( e );\n\t\t\t\t\te = e.Lnext;\n\t\t\t\t}\n\n\t\t\t\t/* The new vertex is now e->Org. */\n\t\t\t\te.Org.coords[0] = vertices[i+0];\n\t\t\t\te.Org.coords[1] = vertices[i+1];\n\t\t\t\tif ( size > 2 )\n\t\t\t\t\te.Org.coords[2] = vertices[i+2];\n\t\t\t\telse\n\t\t\t\t\te.Org.coords[2] = 0.0;\n\t\t\t\t/* Store the insertion number so that the vertex can be later recognized. */\n\t\t\t\te.Org.idx = this.vertexIndexCounter++;\n\n\t\t\t\t/* The winding of an edge says how the winding number changes as we\n\t\t\t\t* cross from the edge''s right face to its left face.  We add the\n\t\t\t\t* vertices in such an order that a CCW contour will add +1 to\n\t\t\t\t* the winding number of the region inside the contour.\n\t\t\t\t*/\n\t\t\t\te.winding = 1;\n\t\t\t\te.Sym.winding = -1;\n\t\t\t}\n\t\t},\n\n\t//\tint tessTesselate( TESStesselator *tess, int windingRule, int elementType, int polySize, int vertexSize, const TESSreal* normal )\n\t\ttesselate: function( windingRule, elementType, polySize, vertexSize, normal ) {\n\t\t\tthis.vertices = [];\n\t\t\tthis.elements = [];\n\t\t\tthis.vertexIndices = [];\n\n\t\t\tthis.vertexIndexCounter = 0;\n\t\t\t\n\t\t\tif (normal)\n\t\t\t{\n\t\t\t\tthis.normal[0] = normal[0];\n\t\t\t\tthis.normal[1] = normal[1];\n\t\t\t\tthis.normal[2] = normal[2];\n\t\t\t}\n\n\t\t\tthis.windingRule = windingRule;\n\n\t\t\tif (vertexSize < 2)\n\t\t\t\tvertexSize = 2;\n\t\t\tif (vertexSize > 3)\n\t\t\t\tvertexSize = 3;\n\n\t/*\t\tif (setjmp(tess->env) != 0) { \n\t\t\t\t// come back here if out of memory\n\t\t\t\treturn 0;\n\t\t\t}*/\n\n\t\t\tif (!this.mesh)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/* Determine the polygon normal and project vertices onto the plane\n\t\t\t* of the polygon.\n\t\t\t*/\n\t\t\tthis.projectPolygon_();\n\n\t\t\t/* tessComputeInterior( tess ) computes the planar arrangement specified\n\t\t\t* by the given contours, and further subdivides this arrangement\n\t\t\t* into regions.  Each region is marked \"inside\" if it belongs\n\t\t\t* to the polygon, according to the rule given by tess->windingRule.\n\t\t\t* Each interior region is guaranteed be monotone.\n\t\t\t*/\n\t\t\tSweep.computeInterior( this );\n\n\t\t\tvar mesh = this.mesh;\n\n\t\t\t/* If the user wants only the boundary contours, we throw away all edges\n\t\t\t* except those which separate the interior from the exterior.\n\t\t\t* Otherwise we tessellate all the regions marked \"inside\".\n\t\t\t*/\n\t\t\tif (elementType == Tess2.BOUNDARY_CONTOURS) {\n\t\t\t\tthis.setWindingNumber_( mesh, 1, true );\n\t\t\t} else {\n\t\t\t\tthis.tessellateInterior_( mesh ); \n\t\t\t}\n\t//\t\tif (rc == 0) longjmp(tess->env,1);  /* could've used a label */\n\n\t\t\tmesh.check();\n\n\t\t\tif (elementType == Tess2.BOUNDARY_CONTOURS) {\n\t\t\t\tthis.outputContours_( mesh, vertexSize );     /* output contours */\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.outputPolymesh_( mesh, elementType, polySize, vertexSize );     /* output polygons */\n\t\t\t}\n\n//\t\t\ttess.mesh = null;\n\n\t\t\treturn true;\n\t\t}\n\t};","module.exports = require('./src/tess2');","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","var Tess2 = require('tess2')\nvar xtend = require('xtend')\n\nmodule.exports = function(contours, opt) {\n    opt = opt||{}\n    contours = contours.filter(function(c) {\n        return c.length>0\n    })\n    \n    if (contours.length === 0) {\n        return { \n            positions: [],\n            cells: []\n        }\n    }\n\n    if (typeof opt.vertexSize !== 'number')\n        opt.vertexSize = contours[0][0].length\n\n    //flatten for tess2.js\n    contours = contours.map(function(c) {\n        return c.reduce(function(a, b) {\n            return a.concat(b)\n        })\n    })\n\n    // Tesselate\n    var res = Tess2.tesselate(xtend({\n        contours: contours,\n        windingRule: Tess2.WINDING_ODD,\n        elementType: Tess2.POLYGONS,\n        polySize: 3,\n        vertexSize: 2\n    }, opt))\n\n    var positions = []\n    for (var i=0; i<res.vertices.length; i+=opt.vertexSize) {\n        var pos = res.vertices.slice(i, i+opt.vertexSize)\n        positions.push(pos)\n    }\n    \n    var cells = []\n    for (i=0; i<res.elements.length; i+=3) {\n        var a = res.elements[i],\n            b = res.elements[i+1],\n            c = res.elements[i+2]\n        cells.push([a, b, c])\n    }\n\n    //return a simplicial complex\n    return {\n        positions: positions,\n        cells: cells\n    }\n}",null,"export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n","export const abs = Math.abs;\nexport const atan2 = Math.atan2;\nexport const cos = Math.cos;\nexport const max = Math.max;\nexport const min = Math.min;\nexport const sin = Math.sin;\nexport const sqrt = Math.sqrt;\n\nexport const epsilon = 1e-12;\nexport const pi = Math.PI;\nexport const halfPi = pi / 2;\nexport const tau = 2 * pi;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);\n}\n","const pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction append(strings) {\n  this._ += strings[0];\n  for (let i = 1, n = strings.length; i < n; ++i) {\n    this._ += arguments[i] + strings[i];\n  }\n}\n\nfunction appendRound(digits) {\n  let d = Math.floor(digits);\n  if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);\n  if (d > 15) return append;\n  const k = 10 ** d;\n  return function(strings) {\n    this._ += strings[0];\n    for (let i = 1, n = strings.length; i < n; ++i) {\n      this._ += Math.round(arguments[i] * k) / k + strings[i];\n    }\n  };\n}\n\nexport class Path {\n  constructor(digits) {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n    this._append = digits == null ? append : appendRound(digits);\n  }\n  moveTo(x, y) {\n    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._append`Z`;\n    }\n  }\n  lineTo(x, y) {\n    this._append`L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  quadraticCurveTo(x1, y1, x, y) {\n    this._append`Q${+x1},${+y1},${this._x1 = +x},${this._y1 = +y}`;\n  }\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arcTo(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(`negative radius: ${r}`);\n\n    let x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._append`M${this._x1 = x1},${this._y1 = y1}`;\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon));\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._append`L${this._x1 = x1},${this._y1 = y1}`;\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      let x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;\n      }\n\n      this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;\n    }\n  }\n  arc(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(`negative radius: ${r}`);\n\n    let dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._append`M${x0},${y0}`;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._append`L${x0},${y0}`;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._append`A${r},${r},0,1,${cw},${x - dx},${y - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._append`A${r},${r},0,${+(da >= pi)},${cw},${this._x1 = x + r * Math.cos(a1)},${this._y1 = y + r * Math.sin(a1)}`;\n    }\n  }\n  rect(x, y, w, h) {\n    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${w = +w}v${+h}h${-w}Z`;\n  }\n  toString() {\n    return this._;\n  }\n}\n\nexport function path() {\n  return new Path;\n}\n\n// Allow instanceof d3.path\npath.prototype = Path.prototype;\n\nexport function pathRound(digits = 3) {\n  return new Path(+digits);\n}\n","import {Path} from \"d3-path\";\n\nexport function withPath(shape) {\n  let digits = 3;\n\n  shape.digits = function(_) {\n    if (!arguments.length) return digits;\n    if (_ == null) {\n      digits = null;\n    } else {\n      const d = Math.floor(_);\n      if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);\n      digits = d;\n    }\n    return shape;\n  };\n\n  return () => new Path(digits);\n}\n","import constant from \"./constant.js\";\nimport {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from \"./math.js\";\nimport {withPath} from \"./path.js\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0, y10 = y1 - y0,\n      x32 = x3 - x2, y32 = y3 - y2,\n      t = y32 * x10 - x32 * y10;\n  if (t * t < epsilon) return;\n  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\n  return [x0 + t * x10, y0 + t * y10];\n}\n\n// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00;\n\n  // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function() {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null,\n      path = withPath(arc);\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n\n    if (!context) context = buffer = path();\n\n    // Ensure that the outer radius is always larger than the inner radius.\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n    // Is it a point?\n    if (!(r1 > epsilon)) context.moveTo(0, 0);\n\n    // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    }\n\n    // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1;\n\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10);\n\n      // Apply rounded corners?\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00),\n            oc;\n\n        // Restrict the corner radius according to the sector angle. If this\n        // intersection fails, it’s probably because the arc is too small, so\n        // disable the corner radius entirely.\n        if (da < pi) {\n          if (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {\n            var ax = x01 - oc[0],\n                ay = y01 - oc[1],\n                bx = x11 - oc[0],\n                by = y11 - oc[1],\n                kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n                lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n            rc0 = min(rc, (r0 - lc) / (kc - 1));\n            rc1 = min(rc, (r1 - lc) / (kc + 1));\n          } else {\n            rc0 = rc1 = 0;\n          }\n        }\n      }\n\n      // Is the sector collapsed to a line?\n      if (!(da1 > epsilon)) context.moveTo(x01, y01);\n\n      // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n      // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\n\n      // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function() {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function(_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function(_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function(_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n  };\n\n  return arc;\n}\n","export var slice = Array.prototype.slice;\n\nexport default function(x) {\n  return typeof x === \"object\" && \"length\" in x\n    ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n}\n","function Linear(context) {\n  this._context = context;\n}\n\nLinear.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // falls through\n      default: this._context.lineTo(x, y); break;\n    }\n  }\n};\n\nexport default function(context) {\n  return new Linear(context);\n}\n","export function x(p) {\n  return p[0];\n}\n\nexport function y(p) {\n  return p[1];\n}\n","import array from \"./array.js\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport {withPath} from \"./path.js\";\nimport {x as pointX, y as pointY} from \"./point.js\";\n\nexport default function(x, y) {\n  var defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null,\n      path = withPath(line);\n\n  x = typeof x === \"function\" ? x : (x === undefined) ? pointX : constant(x);\n  y = typeof y === \"function\" ? y : (y === undefined) ? pointY : constant(y);\n\n  function line(data) {\n    var i,\n        n = (data = array(data)).length,\n        d,\n        defined0 = false,\n        buffer;\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();\n        else output.lineEnd();\n      }\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}\n","import array from \"./array.js\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport line from \"./line.js\";\nimport {withPath} from \"./path.js\";\nimport {x as pointX, y as pointY} from \"./point.js\";\n\nexport default function(x0, y0, y1) {\n  var x1 = null,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null,\n      path = withPath(area);\n\n  x0 = typeof x0 === \"function\" ? x0 : (x0 === undefined) ? pointX : constant(+x0);\n  y0 = typeof y0 === \"function\" ? y0 : (y0 === undefined) ? constant(0) : constant(+y0);\n  y1 = typeof y1 === \"function\" ? y1 : (y1 === undefined) ? pointY : constant(+y1);\n\n  function area(data) {\n    var i,\n        j,\n        k,\n        n = (data = array(data)).length,\n        d,\n        defined0 = false,\n        buffer,\n        x0z = new Array(n),\n        y0z = new Array(n);\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) {\n          j = i;\n          output.areaStart();\n          output.lineStart();\n        } else {\n          output.lineEnd();\n          output.lineStart();\n          for (k = i - 1; k >= j; --k) {\n            output.point(x0z[k], y0z[k]);\n          }\n          output.lineEnd();\n          output.areaEnd();\n        }\n      }\n      if (defined0) {\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n      }\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  function arealine() {\n    return line().defined(defined).curve(curve).context(context);\n  }\n\n  area.x = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\n  };\n\n  area.x0 = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\n  };\n\n  area.x1 = function(_) {\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\n  };\n\n  area.y = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\n  };\n\n  area.y0 = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\n  };\n\n  area.y1 = function(_) {\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\n  };\n\n  area.lineX0 =\n  area.lineY0 = function() {\n    return arealine().x(x0).y(y0);\n  };\n\n  area.lineY1 = function() {\n    return arealine().x(x0).y(y1);\n  };\n\n  area.lineX1 = function() {\n    return arealine().x(x1).y(y0);\n  };\n\n  area.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\n  };\n\n  area.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n  };\n\n  area.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n  };\n\n  return area;\n}\n","import {pi, sqrt, tau} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size / pi);\n    context.moveTo(r, 0);\n    context.arc(0, 0, r, 0, tau);\n  }\n};\n","import constant from \"./constant.js\";\nimport {withPath} from \"./path.js\";\nimport asterisk from \"./symbol/asterisk.js\";\nimport circle from \"./symbol/circle.js\";\nimport cross from \"./symbol/cross.js\";\nimport diamond from \"./symbol/diamond.js\";\nimport diamond2 from \"./symbol/diamond2.js\";\nimport plus from \"./symbol/plus.js\";\nimport square from \"./symbol/square.js\";\nimport square2 from \"./symbol/square2.js\";\nimport star from \"./symbol/star.js\";\nimport triangle from \"./symbol/triangle.js\";\nimport triangle2 from \"./symbol/triangle2.js\";\nimport wye from \"./symbol/wye.js\";\nimport times from \"./symbol/times.js\";\n\n// These symbols are designed to be filled.\nexport const symbolsFill = [\n  circle,\n  cross,\n  diamond,\n  square,\n  star,\n  triangle,\n  wye\n];\n\n// These symbols are designed to be stroked (with a width of 1.5px and round caps).\nexport const symbolsStroke = [\n  circle,\n  plus,\n  times,\n  triangle2,\n  asterisk,\n  square2,\n  diamond2\n];\n\nexport default function Symbol(type, size) {\n  let context = null,\n      path = withPath(symbol);\n\n  type = typeof type === \"function\" ? type : constant(type || circle);\n  size = typeof size === \"function\" ? size : constant(size === undefined ? 64 : +size);\n\n  function symbol() {\n    let buffer;\n    if (!context) context = buffer = path();\n    type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  symbol.type = function(_) {\n    return arguments.length ? (type = typeof _ === \"function\" ? _ : constant(_), symbol) : type;\n  };\n\n  symbol.size = function(_) {\n    return arguments.length ? (size = typeof _ === \"function\" ? _ : constant(+_), symbol) : size;\n  };\n\n  symbol.context = function(_) {\n    return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n  };\n\n  return symbol;\n}\n",null,"module.exports = function numtype(num, def) {\n\treturn typeof num === 'number'\n\t\t? num \n\t\t: (typeof def === 'number' ? def : 0)\n}","module.exports = copy\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nfunction copy(out, a) {\n    out[0] = a[0]\n    out[1] = a[1]\n    return out\n}","module.exports = scaleAndAdd\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nfunction scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale)\n    out[1] = a[1] + (b[1] * scale)\n    return out\n}","module.exports = dot\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1]\n}","function clone(arr) {\n    return [arr[0], arr[1]]\n}\n\nfunction create() {\n    return [0, 0]\n}\n\nmodule.exports = {\n    create: create,\n    clone: clone,\n    copy: require('gl-vec2/copy'),\n    scaleAndAdd: require('gl-vec2/scaleAndAdd'),\n    dot: require('gl-vec2/dot')\n}","module.exports = add\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction add(out, a, b) {\n    out[0] = a[0] + b[0]\n    out[1] = a[1] + b[1]\n    return out\n}","module.exports = set\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nfunction set(out, x, y) {\n    out[0] = x\n    out[1] = y\n    return out\n}","module.exports = normalize\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nfunction normalize(out, a) {\n    var x = a[0],\n        y = a[1]\n    var len = x*x + y*y\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len)\n        out[0] = a[0] * len\n        out[1] = a[1] * len\n    }\n    return out\n}","module.exports = subtract\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction subtract(out, a, b) {\n    out[0] = a[0] - b[0]\n    out[1] = a[1] - b[1]\n    return out\n}","var add = require('gl-vec2/add')\nvar set = require('gl-vec2/set')\nvar normalize = require('gl-vec2/normalize')\nvar subtract = require('gl-vec2/subtract')\nvar dot = require('gl-vec2/dot')\n\nvar tmp = [0, 0]\n\nmodule.exports.computeMiter = function computeMiter(tangent, miter, lineA, lineB, halfThick) {\n    //get tangent line\n    add(tangent, lineA, lineB)\n    normalize(tangent, tangent)\n\n    //get miter as a unit vector\n    set(miter, -tangent[1], tangent[0])\n    set(tmp, -lineA[1], lineA[0])\n\n    //get the necessary length of our miter\n    return halfThick / dot(miter, tmp)\n}\n\nmodule.exports.normal = function normal(out, dir) {\n    //get perpendicular\n    set(out, -dir[1], dir[0])\n    return out\n}\n\nmodule.exports.direction = function direction(out, a, b) {\n    //get unit dir of two lines\n    subtract(out, a, b)\n    normalize(out, out)\n    return out\n}","var number = require('as-number')\nvar vec = require('./vecutil')\n\nvar tmp = vec.create()\nvar capEnd = vec.create()\nvar lineA = vec.create()\nvar lineB = vec.create()\nvar tangent = vec.create()\nvar miter = vec.create()\n\nvar util = require('polyline-miter-util')\nvar computeMiter = util.computeMiter,\n    normal = util.normal,\n    direction = util.direction\n\nfunction Stroke(opt) {\n    if (!(this instanceof Stroke))\n        return new Stroke(opt)\n    opt = opt||{}\n    this.miterLimit = number(opt.miterLimit, 10)\n    this.thickness = number(opt.thickness, 1)\n    this.join = opt.join || 'miter'\n    this.cap = opt.cap || 'butt'\n    this._normal = null\n    this._lastFlip = -1\n    this._started = false\n}\n\nStroke.prototype.mapThickness = function(point, i, points) {\n    return this.thickness\n}\n\nStroke.prototype.build = function(points) {\n    var complex = {\n        positions: [],\n        cells: []\n    }\n\n    if (points.length <= 1)\n        return complex\n\n    var total = points.length\n\n    //clear flags\n    this._lastFlip = -1\n    this._started = false\n    this._normal = null\n\n    //join each segment\n    for (var i=1, count=0; i<total; i++) {\n        var last = points[i-1]\n        var cur = points[i]\n        var next = i<points.length-1 ? points[i+1] : null\n        var thickness = this.mapThickness(cur, i, points)\n        var amt = this._seg(complex, count, last, cur, next, thickness/2)\n        count += amt\n    }\n    return complex\n}\n\nStroke.prototype._seg = function(complex, index, last, cur, next, halfThick) {\n    var count = 0\n    var cells = complex.cells\n    var positions = complex.positions\n    var capSquare = this.cap === 'square'\n    var joinBevel = this.join === 'bevel'\n\n    //get unit direction of line\n    direction(lineA, cur, last)\n\n    //if we don't yet have a normal from previous join,\n    //compute based on line start - end\n    if (!this._normal) {\n        this._normal = vec.create()\n        normal(this._normal, lineA)\n    }\n\n    //if we haven't started yet, add the first two points\n    if (!this._started) {\n        this._started = true\n\n        //if the end cap is type square, we can just push the verts out a bit\n        if (capSquare) {\n            vec.scaleAndAdd(capEnd, last, lineA, -halfThick)\n            last = capEnd\n        }\n\n        extrusions(positions, last, this._normal, halfThick)\n    }\n\n    cells.push([index+0, index+1, index+2])\n\n    /*\n    // now determine the type of join with next segment\n\n    - round (TODO)\n    - bevel \n    - miter\n    - none (i.e. no next segment, use normal)\n     */\n    \n    if (!next) { //no next segment, simple extrusion\n        //now reset normal to finish cap\n        normal(this._normal, lineA)\n\n        //push square end cap out a bit\n        if (capSquare) {\n            vec.scaleAndAdd(capEnd, cur, lineA, halfThick)\n            cur = capEnd\n        }\n\n        extrusions(positions, cur, this._normal, halfThick)\n        cells.push(this._lastFlip===1 ? [index, index+2, index+3] : [index+2, index+1, index+3])\n\n        count += 2\n     } else { //we have a next segment, start with miter\n        //get unit dir of next line\n        direction(lineB, next, cur)\n\n        //stores tangent & miter\n        var miterLen = computeMiter(tangent, miter, lineA, lineB, halfThick)\n\n        // normal(tmp, lineA)\n        \n        //get orientation\n        var flip = (vec.dot(tangent, this._normal) < 0) ? -1 : 1\n\n        var bevel = joinBevel\n        if (!bevel && this.join === 'miter') {\n            var limit = miterLen / (halfThick)\n            if (limit > this.miterLimit)\n                bevel = true\n        }\n\n        if (bevel) {    \n            //next two points in our first segment\n            vec.scaleAndAdd(tmp, cur, this._normal, -halfThick * flip)\n            positions.push(vec.clone(tmp))\n            vec.scaleAndAdd(tmp, cur, miter, miterLen * flip)\n            positions.push(vec.clone(tmp))\n\n\n            cells.push(this._lastFlip!==-flip\n                    ? [index, index+2, index+3] \n                    : [index+2, index+1, index+3])\n\n            //now add the bevel triangle\n            cells.push([index+2, index+3, index+4])\n\n            normal(tmp, lineB)\n            vec.copy(this._normal, tmp) //store normal for next round\n\n            vec.scaleAndAdd(tmp, cur, tmp, -halfThick*flip)\n            positions.push(vec.clone(tmp))\n\n            // //the miter is now the normal for our next join\n            count += 3\n        } else { //miter\n            //next two points for our miter join\n            extrusions(positions, cur, miter, miterLen)\n            cells.push(this._lastFlip===1\n                    ? [index, index+2, index+3] \n                    : [index+2, index+1, index+3])\n\n            flip = -1\n\n            //the miter is now the normal for our next join\n            vec.copy(this._normal, miter)\n            count += 2\n        }\n        this._lastFlip = flip\n     }\n     return count\n}\n\nfunction extrusions(positions, point, normal, scale) {\n    //next two points to end our segment\n    vec.scaleAndAdd(tmp, point, normal, -scale)\n    positions.push(vec.clone(tmp))\n\n    vec.scaleAndAdd(tmp, point, normal, scale)\n    positions.push(vec.clone(tmp))\n}\n\nmodule.exports = Stroke",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"function accessor (fn, fields, name) {\n  fn.fields = fields || [];\n  fn.fname = name;\n  return fn;\n}\nfunction accessorName(fn) {\n  return fn == null ? null : fn.fname;\n}\nfunction accessorFields(fn) {\n  return fn == null ? null : fn.fields;\n}\n\nfunction getter (path) {\n  return path.length === 1 ? get1(path[0]) : getN(path);\n}\nconst get1 = field => function (obj) {\n  return obj[field];\n};\nconst getN = path => {\n  const len = path.length;\n  return function (obj) {\n    for (let i = 0; i < len; ++i) {\n      obj = obj[path[i]];\n    }\n    return obj;\n  };\n};\n\nfunction error (message) {\n  throw Error(message);\n}\n\nfunction splitAccessPath (p) {\n  const path = [],\n    n = p.length;\n  let q = null,\n    b = 0,\n    s = '',\n    i,\n    j,\n    c;\n  p = p + '';\n  function push() {\n    path.push(s + p.substring(i, j));\n    s = '';\n    i = j + 1;\n  }\n  for (i = j = 0; j < n; ++j) {\n    c = p[j];\n    if (c === '\\\\') {\n      s += p.substring(i, j++);\n      i = j;\n    } else if (c === q) {\n      push();\n      q = null;\n      b = -1;\n    } else if (q) {\n      continue;\n    } else if (i === b && c === '\"') {\n      i = j + 1;\n      q = c;\n    } else if (i === b && c === \"'\") {\n      i = j + 1;\n      q = c;\n    } else if (c === '.' && !b) {\n      if (j > i) {\n        push();\n      } else {\n        i = j + 1;\n      }\n    } else if (c === '[') {\n      if (j > i) push();\n      b = i = j + 1;\n    } else if (c === ']') {\n      if (!b) error('Access path missing open bracket: ' + p);\n      if (b > 0) push();\n      b = 0;\n      i = j + 1;\n    }\n  }\n  if (b) error('Access path missing closing bracket: ' + p);\n  if (q) error('Access path missing closing quote: ' + p);\n  if (j > i) {\n    j++;\n    push();\n  }\n  return path;\n}\n\nfunction field (field, name, opt) {\n  const path = splitAccessPath(field);\n  field = path.length === 1 ? path[0] : field;\n  return accessor((opt && opt.get || getter)(path), [field], name || field);\n}\n\nconst id = field('id');\nconst identity = accessor(_ => _, [], 'identity');\nconst zero = accessor(() => 0, [], 'zero');\nconst one = accessor(() => 1, [], 'one');\nconst truthy = accessor(() => true, [], 'true');\nconst falsy = accessor(() => false, [], 'false');\n\nfunction log$1(method, level, input) {\n  const args = [level].concat([].slice.call(input));\n  console[method].apply(console, args); // eslint-disable-line no-console\n}\n\nconst None = 0;\nconst Error$1 = 1;\nconst Warn = 2;\nconst Info = 3;\nconst Debug = 4;\nfunction logger (_, method) {\n  let handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : log$1;\n  let level = _ || None;\n  return {\n    level(_) {\n      if (arguments.length) {\n        level = +_;\n        return this;\n      } else {\n        return level;\n      }\n    },\n    error() {\n      if (level >= Error$1) handler(method || 'error', 'ERROR', arguments);\n      return this;\n    },\n    warn() {\n      if (level >= Warn) handler(method || 'warn', 'WARN', arguments);\n      return this;\n    },\n    info() {\n      if (level >= Info) handler(method || 'log', 'INFO', arguments);\n      return this;\n    },\n    debug() {\n      if (level >= Debug) handler(method || 'log', 'DEBUG', arguments);\n      return this;\n    }\n  };\n}\n\nvar isArray = Array.isArray;\n\nfunction isObject (_) {\n  return _ === Object(_);\n}\n\nconst isLegalKey = key => key !== '__proto__';\nfunction mergeConfig() {\n  for (var _len = arguments.length, configs = new Array(_len), _key = 0; _key < _len; _key++) {\n    configs[_key] = arguments[_key];\n  }\n  return configs.reduce((out, source) => {\n    for (const key in source) {\n      if (key === 'signals') {\n        // for signals, we merge the signals arrays\n        // source signals take precedence over\n        // existing signals with the same name\n        out.signals = mergeNamed(out.signals, source.signals);\n      } else {\n        // otherwise, merge objects subject to recursion constraints\n        // for legend block, recurse for the layout entry only\n        // for style block, recurse for all properties\n        // otherwise, no recursion: objects overwrite, no merging\n        const r = key === 'legend' ? {\n          layout: 1\n        } : key === 'style' ? true : null;\n        writeConfig(out, key, source[key], r);\n      }\n    }\n    return out;\n  }, {});\n}\nfunction writeConfig(output, key, value, recurse) {\n  if (!isLegalKey(key)) return;\n  let k, o;\n  if (isObject(value) && !isArray(value)) {\n    o = isObject(output[key]) ? output[key] : output[key] = {};\n    for (k in value) {\n      if (recurse && (recurse === true || recurse[k])) {\n        writeConfig(o, k, value[k]);\n      } else if (isLegalKey(k)) {\n        o[k] = value[k];\n      }\n    }\n  } else {\n    output[key] = value;\n  }\n}\nfunction mergeNamed(a, b) {\n  if (a == null) return b;\n  const map = {},\n    out = [];\n  function add(_) {\n    if (!map[_.name]) {\n      map[_.name] = 1;\n      out.push(_);\n    }\n  }\n  b.forEach(add);\n  a.forEach(add);\n  return out;\n}\n\nfunction peek (array) {\n  return array[array.length - 1];\n}\n\nfunction toNumber (_) {\n  return _ == null || _ === '' ? null : +_;\n}\n\nconst exp = sign => x => sign * Math.exp(x);\nconst log = sign => x => Math.log(sign * x);\nconst symlog = c => x => Math.sign(x) * Math.log1p(Math.abs(x / c));\nconst symexp = c => x => Math.sign(x) * Math.expm1(Math.abs(x)) * c;\nconst pow = exponent => x => x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\nfunction pan(domain, delta, lift, ground) {\n  const d0 = lift(domain[0]),\n    d1 = lift(peek(domain)),\n    dd = (d1 - d0) * delta;\n  return [ground(d0 - dd), ground(d1 - dd)];\n}\nfunction panLinear(domain, delta) {\n  return pan(domain, delta, toNumber, identity);\n}\nfunction panLog(domain, delta) {\n  var sign = Math.sign(domain[0]);\n  return pan(domain, delta, log(sign), exp(sign));\n}\nfunction panPow(domain, delta, exponent) {\n  return pan(domain, delta, pow(exponent), pow(1 / exponent));\n}\nfunction panSymlog(domain, delta, constant) {\n  return pan(domain, delta, symlog(constant), symexp(constant));\n}\nfunction zoom(domain, anchor, scale, lift, ground) {\n  const d0 = lift(domain[0]),\n    d1 = lift(peek(domain)),\n    da = anchor != null ? lift(anchor) : (d0 + d1) / 2;\n  return [ground(da + (d0 - da) * scale), ground(da + (d1 - da) * scale)];\n}\nfunction zoomLinear(domain, anchor, scale) {\n  return zoom(domain, anchor, scale, toNumber, identity);\n}\nfunction zoomLog(domain, anchor, scale) {\n  const sign = Math.sign(domain[0]);\n  return zoom(domain, anchor, scale, log(sign), exp(sign));\n}\nfunction zoomPow(domain, anchor, scale, exponent) {\n  return zoom(domain, anchor, scale, pow(exponent), pow(1 / exponent));\n}\nfunction zoomSymlog(domain, anchor, scale, constant) {\n  return zoom(domain, anchor, scale, symlog(constant), symexp(constant));\n}\n\nfunction quarter(date) {\n  return 1 + ~~(new Date(date).getMonth() / 3);\n}\nfunction utcquarter(date) {\n  return 1 + ~~(new Date(date).getUTCMonth() / 3);\n}\n\nfunction array (_) {\n  return _ != null ? isArray(_) ? _ : [_] : [];\n}\n\n/**\n * Span-preserving range clamp. If the span of the input range is less\n * than (max - min) and an endpoint exceeds either the min or max value,\n * the range is translated such that the span is preserved and one\n * endpoint touches the boundary of the min/max range.\n * If the span exceeds (max - min), the range [min, max] is returned.\n */\nfunction clampRange (range, min, max) {\n  let lo = range[0],\n    hi = range[1],\n    span;\n  if (hi < lo) {\n    span = hi;\n    hi = lo;\n    lo = span;\n  }\n  span = hi - lo;\n  return span >= max - min ? [min, max] : [lo = Math.min(Math.max(lo, min), max - span), lo + span];\n}\n\nfunction isFunction (_) {\n  return typeof _ === 'function';\n}\n\nconst DESCENDING = 'descending';\nfunction compare (fields, orders, opt) {\n  opt = opt || {};\n  orders = array(orders) || [];\n  const ord = [],\n    get = [],\n    fmap = {},\n    gen = opt.comparator || comparator;\n  array(fields).forEach((f, i) => {\n    if (f == null) return;\n    ord.push(orders[i] === DESCENDING ? -1 : 1);\n    get.push(f = isFunction(f) ? f : field(f, null, opt));\n    (accessorFields(f) || []).forEach(_ => fmap[_] = 1);\n  });\n  return get.length === 0 ? null : accessor(gen(get, ord), Object.keys(fmap));\n}\nconst ascending = (u, v) => (u < v || u == null) && v != null ? -1 : (u > v || v == null) && u != null ? 1 : (v = v instanceof Date ? +v : v, u = u instanceof Date ? +u : u) !== u && v === v ? -1 : v !== v && u === u ? 1 : 0;\nconst comparator = (fields, orders) => fields.length === 1 ? compare1(fields[0], orders[0]) : compareN(fields, orders, fields.length);\nconst compare1 = (field, order) => function (a, b) {\n  return ascending(field(a), field(b)) * order;\n};\nconst compareN = (fields, orders, n) => {\n  orders.push(0); // pad zero for convenient lookup\n  return function (a, b) {\n    let f,\n      c = 0,\n      i = -1;\n    while (c === 0 && ++i < n) {\n      f = fields[i];\n      c = ascending(f(a), f(b));\n    }\n    return c * orders[i];\n  };\n};\n\nfunction constant (_) {\n  return isFunction(_) ? _ : () => _;\n}\n\nfunction debounce (delay, handler) {\n  let tid;\n  return e => {\n    if (tid) clearTimeout(tid);\n    tid = setTimeout(() => (handler(e), tid = null), delay);\n  };\n}\n\nfunction extend (_) {\n  for (let x, k, i = 1, len = arguments.length; i < len; ++i) {\n    x = arguments[i];\n    for (k in x) {\n      _[k] = x[k];\n    }\n  }\n  return _;\n}\n\n/**\n * Return an array with minimum and maximum values, in the\n * form [min, max]. Ignores null, undefined, and NaN values.\n */\nfunction extent (array, f) {\n  let i = 0,\n    n,\n    v,\n    min,\n    max;\n  if (array && (n = array.length)) {\n    if (f == null) {\n      // find first valid value\n      for (v = array[i]; i < n && (v == null || v !== v); v = array[++i]);\n      min = max = v;\n\n      // visit all other values\n      for (; i < n; ++i) {\n        v = array[i];\n        // skip null/undefined; NaN will fail all comparisons\n        if (v != null) {\n          if (v < min) min = v;\n          if (v > max) max = v;\n        }\n      }\n    } else {\n      // find first valid value\n      for (v = f(array[i]); i < n && (v == null || v !== v); v = f(array[++i]));\n      min = max = v;\n\n      // visit all other values\n      for (; i < n; ++i) {\n        v = f(array[i]);\n        // skip null/undefined; NaN will fail all comparisons\n        if (v != null) {\n          if (v < min) min = v;\n          if (v > max) max = v;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n\nfunction extentIndex (array, f) {\n  const n = array.length;\n  let i = -1,\n    a,\n    b,\n    c,\n    u,\n    v;\n  if (f == null) {\n    while (++i < n) {\n      b = array[i];\n      if (b != null && b >= b) {\n        a = c = b;\n        break;\n      }\n    }\n    if (i === n) return [-1, -1];\n    u = v = i;\n    while (++i < n) {\n      b = array[i];\n      if (b != null) {\n        if (a > b) {\n          a = b;\n          u = i;\n        }\n        if (c < b) {\n          c = b;\n          v = i;\n        }\n      }\n    }\n  } else {\n    while (++i < n) {\n      b = f(array[i], i, array);\n      if (b != null && b >= b) {\n        a = c = b;\n        break;\n      }\n    }\n    if (i === n) return [-1, -1];\n    u = v = i;\n    while (++i < n) {\n      b = f(array[i], i, array);\n      if (b != null) {\n        if (a > b) {\n          a = b;\n          u = i;\n        }\n        if (c < b) {\n          c = b;\n          v = i;\n        }\n      }\n    }\n  }\n  return [u, v];\n}\n\nconst hop = Object.prototype.hasOwnProperty;\nfunction has (object, property) {\n  return hop.call(object, property);\n}\n\nconst NULL = {};\nfunction fastmap (input) {\n  let obj = {},\n    test;\n  function has$1(key) {\n    return has(obj, key) && obj[key] !== NULL;\n  }\n  const map = {\n    size: 0,\n    empty: 0,\n    object: obj,\n    has: has$1,\n    get(key) {\n      return has$1(key) ? obj[key] : undefined;\n    },\n    set(key, value) {\n      if (!has$1(key)) {\n        ++map.size;\n        if (obj[key] === NULL) --map.empty;\n      }\n      obj[key] = value;\n      return this;\n    },\n    delete(key) {\n      if (has$1(key)) {\n        --map.size;\n        ++map.empty;\n        obj[key] = NULL;\n      }\n      return this;\n    },\n    clear() {\n      map.size = map.empty = 0;\n      map.object = obj = {};\n    },\n    test(_) {\n      if (arguments.length) {\n        test = _;\n        return map;\n      } else {\n        return test;\n      }\n    },\n    clean() {\n      const next = {};\n      let size = 0;\n      for (const key in obj) {\n        const value = obj[key];\n        if (value !== NULL && (!test || !test(value))) {\n          next[key] = value;\n          ++size;\n        }\n      }\n      map.size = size;\n      map.empty = 0;\n      map.object = obj = next;\n    }\n  };\n  if (input) Object.keys(input).forEach(key => {\n    map.set(key, input[key]);\n  });\n  return map;\n}\n\nfunction flush (range, value, threshold, left, right, center) {\n  if (!threshold && threshold !== 0) return center;\n  const t = +threshold;\n  let a = range[0],\n    b = peek(range),\n    l;\n\n  // swap endpoints if range is reversed\n  if (b < a) {\n    l = a;\n    a = b;\n    b = l;\n  }\n\n  // compare value to endpoints\n  l = Math.abs(value - a);\n  const r = Math.abs(b - value);\n\n  // adjust if value is within threshold distance of endpoint\n  return l < r && l <= t ? left : r <= t ? right : center;\n}\n\nfunction inherits (child, parent, members) {\n  const proto = child.prototype = Object.create(parent.prototype);\n  Object.defineProperty(proto, 'constructor', {\n    value: child,\n    writable: true,\n    enumerable: true,\n    configurable: true\n  });\n  return extend(proto, members);\n}\n\n/**\n * Predicate that returns true if the value lies within the span\n * of the given range. The left and right flags control the use\n * of inclusive (true) or exclusive (false) comparisons.\n */\nfunction inrange (value, range, left, right) {\n  let r0 = range[0],\n    r1 = range[range.length - 1],\n    t;\n  if (r0 > r1) {\n    t = r0;\n    r0 = r1;\n    r1 = t;\n  }\n  left = left === undefined || left;\n  right = right === undefined || right;\n  return (left ? r0 <= value : r0 < value) && (right ? value <= r1 : value < r1);\n}\n\nfunction isBoolean (_) {\n  return typeof _ === 'boolean';\n}\n\nfunction isDate (_) {\n  return Object.prototype.toString.call(_) === '[object Date]';\n}\n\nfunction isIterable (_) {\n  return _ && isFunction(_[Symbol.iterator]);\n}\n\nfunction isNumber (_) {\n  return typeof _ === 'number';\n}\n\nfunction isRegExp (_) {\n  return Object.prototype.toString.call(_) === '[object RegExp]';\n}\n\nfunction isString (_) {\n  return typeof _ === 'string';\n}\n\nfunction key (fields, flat, opt) {\n  if (fields) {\n    fields = flat ? array(fields).map(f => f.replace(/\\\\(.)/g, '$1')) : array(fields);\n  }\n  const len = fields && fields.length,\n    gen = opt && opt.get || getter,\n    map = f => gen(flat ? [f] : splitAccessPath(f));\n  let fn;\n  if (!len) {\n    fn = function () {\n      return '';\n    };\n  } else if (len === 1) {\n    const get = map(fields[0]);\n    fn = function (_) {\n      return '' + get(_);\n    };\n  } else {\n    const get = fields.map(map);\n    fn = function (_) {\n      let s = '' + get[0](_),\n        i = 0;\n      while (++i < len) s += '|' + get[i](_);\n      return s;\n    };\n  }\n  return accessor(fn, fields, 'key');\n}\n\nfunction lerp (array, frac) {\n  const lo = array[0],\n    hi = peek(array),\n    f = +frac;\n  return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);\n}\n\nconst DEFAULT_MAX_SIZE = 10000;\n\n// adapted from https://github.com/dominictarr/hashlru/ (MIT License)\nfunction lruCache (maxsize) {\n  maxsize = +maxsize || DEFAULT_MAX_SIZE;\n  let curr, prev, size;\n  const clear = () => {\n    curr = {};\n    prev = {};\n    size = 0;\n  };\n  const update = (key, value) => {\n    if (++size > maxsize) {\n      prev = curr;\n      curr = {};\n      size = 1;\n    }\n    return curr[key] = value;\n  };\n  clear();\n  return {\n    clear,\n    has: key => has(curr, key) || has(prev, key),\n    get: key => has(curr, key) ? curr[key] : has(prev, key) ? update(key, prev[key]) : undefined,\n    set: (key, value) => has(curr, key) ? curr[key] = value : update(key, value)\n  };\n}\n\nfunction merge (compare, array0, array1, output) {\n  const n0 = array0.length,\n    n1 = array1.length;\n  if (!n1) return array0;\n  if (!n0) return array1;\n  const merged = output || new array0.constructor(n0 + n1);\n  let i0 = 0,\n    i1 = 0,\n    i = 0;\n  for (; i0 < n0 && i1 < n1; ++i) {\n    merged[i] = compare(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];\n  }\n  for (; i0 < n0; ++i0, ++i) {\n    merged[i] = array0[i0];\n  }\n  for (; i1 < n1; ++i1, ++i) {\n    merged[i] = array1[i1];\n  }\n  return merged;\n}\n\nfunction repeat (str, reps) {\n  let s = '';\n  while (--reps >= 0) s += str;\n  return s;\n}\n\nfunction pad (str, length, padchar, align) {\n  const c = padchar || ' ',\n    s = str + '',\n    n = length - s.length;\n  return n <= 0 ? s : align === 'left' ? repeat(c, n) + s : align === 'center' ? repeat(c, ~~(n / 2)) + s + repeat(c, Math.ceil(n / 2)) : s + repeat(c, n);\n}\n\n/**\n * Return the numerical span of an array: the difference between\n * the last and first values.\n */\nfunction span (array) {\n  return array && peek(array) - array[0] || 0;\n}\n\nfunction $(x) {\n  return isArray(x) ? '[' + x.map($) + ']' : isObject(x) || isString(x) ?\n  // Output valid JSON and JS source strings.\n  // See http://timelessrepo.com/json-isnt-a-javascript-subset\n  JSON.stringify(x).replace('\\u2028', '\\\\u2028').replace('\\u2029', '\\\\u2029') : x;\n}\n\nfunction toBoolean (_) {\n  return _ == null || _ === '' ? null : !_ || _ === 'false' || _ === '0' ? false : !!_;\n}\n\nconst defaultParser = _ => isNumber(_) ? _ : isDate(_) ? _ : Date.parse(_);\nfunction toDate (_, parser) {\n  parser = parser || defaultParser;\n  return _ == null || _ === '' ? null : parser(_);\n}\n\nfunction toString (_) {\n  return _ == null || _ === '' ? null : _ + '';\n}\n\nfunction toSet (_) {\n  const s = {},\n    n = _.length;\n  for (let i = 0; i < n; ++i) s[_[i]] = true;\n  return s;\n}\n\nfunction truncate (str, length, align, ellipsis) {\n  const e = ellipsis != null ? ellipsis : '\\u2026',\n    s = str + '',\n    n = s.length,\n    l = Math.max(0, length - e.length);\n  return n <= length ? s : align === 'left' ? e + s.slice(n - l) : align === 'center' ? s.slice(0, Math.ceil(l / 2)) + e + s.slice(n - ~~(l / 2)) : s.slice(0, l) + e;\n}\n\nfunction visitArray (array, filter, visitor) {\n  if (array) {\n    if (filter) {\n      const n = array.length;\n      for (let i = 0; i < n; ++i) {\n        const t = filter(array[i]);\n        if (t) visitor(t, i, array);\n      }\n    } else {\n      array.forEach(visitor);\n    }\n  }\n}\n\nexport { Debug, Error$1 as Error, Info, None, Warn, accessor, accessorFields, accessorName, array, ascending, clampRange, compare, constant, debounce, error, extend, extent, extentIndex, falsy, fastmap, field, flush, has as hasOwnProperty, id, identity, inherits, inrange, isArray, isBoolean, isDate, isFunction, isIterable, isNumber, isObject, isRegExp, isString, key, lerp, logger, lruCache, merge, mergeConfig, one, pad, panLinear, panLog, panPow, panSymlog, peek, quarter, repeat, span, splitAccessPath, $ as stringValue, toBoolean, toDate, toNumber, toSet, toString, truncate, truthy, utcquarter, visitArray, writeConfig, zero, zoomLinear, zoomLog, zoomPow, zoomSymlog };\n",null,null],"names":["color","number","require$$0","require$$1","simplifyPathModule","clone","arc","line","abs","require$$2","copy","require$$3","Tess2","tess2","extend","parse","epsilon","pi","tau","x","y","pointX","pointY","Symbol","pathSymbols","pathTrail","pathRectangle","d3_symbol","area","pathCurves","shape","require$$4","drawName","draw","_device","_bufferManager","_shader","_vertextBufferManager","_pipeline","_renderPassDescriptor","isInitialized","initialize","createGeometryData","createPosition","_geometryBuffer","createAttributes","marks","Renderer","Bounds","clear","RendererFunctions","CanvasHandler","renderModule"],"mappings":"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","x_google_ignoreList":[0,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,61]}